[{"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/index.tsx":"1","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/store.ts":"2","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/App/App.tsx":"3","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/reducers/index.ts":"4","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/utils/routePath.ts":"5","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/actions/computers.ts":"6","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/hooks/hooks.ts":"7","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/utils/api.ts":"8","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/AppHeader/AppHeader.tsx":"9","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/pages/HomePage/HomePage.tsx":"10","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/pages/StorePage/StorePage.tsx":"11","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/pages/StatPage/StatPage.tsx":"12","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/pages/SettingsPage/SettingsPage.tsx":"13","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/reducers/computers.ts":"14","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/Store/Store.tsx":"15","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/Constructor/Constructor.tsx":"16","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/actions/store.ts":"17","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/Modal/Modal.tsx":"18","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/pages/WarehousePage/WarehousePage.tsx":"19","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/reducers/warehouse.ts":"20","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/reducers/store.ts":"21","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/ModalOverlay/ModalOverlay.tsx":"22","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/Warehouse/Warehouse.tsx":"23","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/actions/warehouse.ts":"24","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/WarehouseDetails/WarehouseDetails.tsx":"25","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/ComputerDetails/ComputerDetails.tsx":"26","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/PlaygroundGrid/PlaygroundGrid.tsx":"27","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/PlaygroundSquare/PlaygroundSquare.tsx":"28","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/utils/constants.ts":"29","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/PaymentSwitcher/PaymentSwitcher.tsx":"30"},{"size":623,"mtime":1696790135515,"results":"31","hashOfConfig":"32"},{"size":297,"mtime":1696790107160,"results":"33","hashOfConfig":"32"},{"size":3274,"mtime":1696790061212,"results":"34","hashOfConfig":"32"},{"size":339,"mtime":1696746912493,"results":"35","hashOfConfig":"32"},{"size":189,"mtime":1696790129484,"results":"36","hashOfConfig":"32"},{"size":2069,"mtime":1696790087850,"results":"37","hashOfConfig":"32"},{"size":426,"mtime":1696529878487,"results":"38","hashOfConfig":"32"},{"size":7477,"mtime":1696790123605,"results":"39","hashOfConfig":"32"},{"size":2307,"mtime":1696790047331,"results":"40","hashOfConfig":"32"},{"size":230,"mtime":1696790070446,"results":"41","hashOfConfig":"32"},{"size":280,"mtime":1696790082534,"results":"42","hashOfConfig":"32"},{"size":1120,"mtime":1696790079008,"results":"43","hashOfConfig":"32"},{"size":296,"mtime":1696790074315,"results":"44","hashOfConfig":"32"},{"size":1049,"mtime":1696756883282,"results":"45","hashOfConfig":"32"},{"size":5919,"mtime":1696789798886,"results":"46","hashOfConfig":"32"},{"size":323,"mtime":1696789917427,"results":"47","hashOfConfig":"32"},{"size":1848,"mtime":1696746912492,"results":"48","hashOfConfig":"32"},{"size":1869,"mtime":1696789896999,"results":"49","hashOfConfig":"32"},{"size":300,"mtime":1696790085634,"results":"50","hashOfConfig":"32"},{"size":1045,"mtime":1696746912493,"results":"51","hashOfConfig":"32"},{"size":1009,"mtime":1696759583945,"results":"52","hashOfConfig":"32"},{"size":391,"mtime":1696789890295,"results":"53","hashOfConfig":"32"},{"size":9316,"mtime":1696789783185,"results":"54","hashOfConfig":"32"},{"size":2091,"mtime":1696746912492,"results":"55","hashOfConfig":"32"},{"size":12244,"mtime":1696789732651,"results":"56","hashOfConfig":"32"},{"size":13567,"mtime":1696790036649,"results":"57","hashOfConfig":"32"},{"size":2642,"mtime":1696789866792,"results":"58","hashOfConfig":"32"},{"size":6255,"mtime":1696828281973,"results":"59","hashOfConfig":"32"},{"size":1006,"mtime":1696790127004,"results":"60","hashOfConfig":"32"},{"size":1216,"mtime":1696789882314,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},"krbkya",{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"117"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/index.tsx",[],[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/store.ts",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/App/App.tsx",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/reducers/index.ts",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/utils/routePath.ts",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/actions/computers.ts",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/hooks/hooks.ts",[],[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/utils/api.ts",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/AppHeader/AppHeader.tsx",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/pages/HomePage/HomePage.tsx",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/pages/StorePage/StorePage.tsx",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/pages/StatPage/StatPage.tsx",["161"],[],"import { useEffect } from \"react\";\nimport styles from \"./StatPage.module.css\";\nimport { fetchStatPC, fetchStatStore } from \"../../utils/api\";\n\nexport const StatPage = () => {\n    const from = \"2019-08-24T14:15:22Z\";\n    const until = \"2024-08-24T14:15:22Z\";\n\n    const getStatPC = () => {\n        fetchStatPC(from, until)\n            .then(res => {\n                console.log({ res });\n            })\n            .catch(error => {\n                console.log({ error });\n            });\n    }\n    const getStatStore = () => {\n        fetchStatStore(from, until)\n            .then(res => {\n                console.log({ res });\n            })\n            .catch(error => {\n                console.log({ error });\n            });\n    }\n\n    return (\n        <section className={styles.container}>\n            <h1>Статистика</h1>\n\n            <article>\n                <button onClick={getStatPC}>\n                    getStatPC\n                </button>\n\n                <button onClick={getStatStore}>\n                    getStatStore\n                </button>\n            </article>\n        </section>\n    )\n};","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/pages/SettingsPage/SettingsPage.tsx",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/reducers/computers.ts",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/Store/Store.tsx",["162","163"],[],"import React, { FC, useState, useEffect } from 'react';\nimport styles from \"./Store.module.css\";\nimport { useAppSelector } from '../../services/hooks/hooks';\nimport { TStoreItem } from '../../services/types/types';\nimport { fetchStoreSell } from '../../utils/api';\nimport { PaymentSwitcher } from '../PaymentSwitcher/PaymentSwitcher';\n\nexport const Store: FC = () => {\n    const [selectedItems, setSelectedItems] = useState<any[]>([]);\n    const [totalPrice, setTotalPrice] = useState<number>(0);\n    const [paymentType, setPaymentType] = useState<string>(\"card\");\n    const [itemCounts, setItemCounts] = useState<Record<number, number>>({});\n    const storeItems = useAppSelector((store) => store.store.items.filter((item: any) => item.qty > 0 && item.hide === false));\n\n    useEffect(() => {\n        // При изменении выбранных товаров пересчитываем общую стоимость и общее количество\n        const selectedProducts = storeItems.filter((item: TStoreItem) => selectedItems.includes(item.id));\n        const price = selectedProducts.reduce((total: number, product: TStoreItem) => {\n            // Умножаем стоимость на количество из состояния itemCounts\n            const count = itemCounts[product.id] || 0;\n            return total + product.price * count;\n        }, 0);\n        setTotalPrice(price);\n    }, [selectedItems, itemCounts]);\n\n    const handleItemClick = (itemId: any) => {\n        if (selectedItems.includes(itemId)) {\n            setSelectedItems(selectedItems.filter((id) => id !== itemId));\n        } else {\n            setSelectedItems([...selectedItems, itemId]);\n        }\n    };\n\n    const handleIncrement = (itemId: any) => {\n        setItemCounts((prevCounts) => ({\n            ...prevCounts,\n            [itemId]: (prevCounts[itemId] || 0) + 1\n        }));\n    };\n\n    const handleDecrement = (itemId: number) => {\n        setItemCounts((prevCounts) => {\n            const currentCount = prevCounts[itemId] || 0;\n            const updatedCount = Math.max(0, currentCount - 1);\n            return {\n                ...prevCounts,\n                [itemId]: updatedCount\n            };\n        });\n    };\n\n    const handleAddToCart = () => {\n        const selectedProducts = storeItems.filter((item: TStoreItem) => selectedItems.includes(item.id))\n            .map((item: TStoreItem) => {\n                const count = itemCounts[item.id] || 0;\n                return { ...item, count };\n            });\n\n        const data = {\n            items: selectedProducts,\n            payment: paymentType\n        };\n\n        fetchStoreSell(data)\n            .then(res => {\n                console.log({ res })\n            })\n            .catch(error => {\n                console.log({ error })\n            });\n        // setModalOpen(false);\n        setSelectedItems([]);\n    };\n\n    return (\n        <article className={`${styles.storeContainer} ${styles.mt4}`}>\n            <div className={styles.card}>\n                <table className={styles.table}>\n                    <thead>\n                        <tr>\n                            <th>Название</th>\n                            <th>Стоимость</th>\n                            <th>Количество</th>\n                        </tr>\n                    </thead>\n                    <tbody className={styles.cardScroll}>\n                        {storeItems.map((item: TStoreItem) => (\n                            <tr\n                                key={item.id}\n                                className={selectedItems.includes(item.id) ? styles.selectedRow : \"\"}\n                                onClick={() => handleItemClick(item.id)}\n                            >\n                                <td>{item.name}</td>\n                                <td>{item.price}</td>\n                                <td>{item.qty}</td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n\n            <div className={styles.cart}>\n                <div className={styles.cartHeader}>\n                    <h2>Корзина</h2>\n                </div>\n\n                <div className={styles.cartBody}>\n                    {selectedItems.length > 0 ? (\n                        <ul>\n                            {selectedItems.map((itemId) => {\n                                const item = storeItems.find((item: TStoreItem) => item.id === itemId);\n                                return (\n\n                                    <li className={styles.cartRow} key={itemId}>\n                                        {item.name}\n                                        <div className={styles.cartRow}>\n                                            <button className={styles.symbolsCircle} onClick={() => handleDecrement(item.id)}>-</button>\n                                            {itemCounts[item.id] || 0}\n                                            <button className={styles.symbolsCircle} onClick={() => handleIncrement(item.id)}>+</button>\n                                        </div>\n                                    </li>\n                                )\n                            })}\n                        </ul>\n                    ) : (\n                        <p>Корзина пуста</p>\n                    )}\n                </div>\n\n                <div className={styles.cartFooter}>\n                    <PaymentSwitcher />\n                    <button className={`${styles.submitButton} ${styles.mt2}`} onClick={handleAddToCart} disabled={selectedItems.length === 0}>\n                        Оплатить\n                        <span>\n                            {totalPrice} руб.\n                        </span>\n                    </button>\n                </div>\n\n            </div>\n        </article>\n    );\n};","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/Constructor/Constructor.tsx",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/actions/store.ts",[],[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/Modal/Modal.tsx",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/pages/WarehousePage/WarehousePage.tsx",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/reducers/warehouse.ts",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/reducers/store.ts",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/ModalOverlay/ModalOverlay.tsx",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/Warehouse/Warehouse.tsx",["164"],[],"import React, { FC, useState, useEffect } from 'react';\nimport styles from \"./Warehouse.module.css\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { useAppDispatch, useAppSelector } from '../../services/hooks/hooks';\nimport { TStoreItem } from '../../services/types/types';\nimport { FETCH_STORE_FAILURE, FETCH_STORE_REQUEST, FETCH_STORE_SUCCESS } from '../../services/actions/store';\nimport Modal from '../Modal/Modal';\nimport WarehouseDetails from '../WarehouseDetails/WarehouseDetails';\nimport { fetchStoreData } from '../../utils/api';\nimport { SELECT_WAREHOUSE_REQUEST, SELECT_WAREHOUSE_SUCCESS } from '../../services/actions/warehouse';\nimport { ADD_ITEM, ADD_SUPPLY, EDIT_ITEM, HIDE_ITEM, SHOW_ITEM } from '../../utils/constants';\n\nexport const Warehouse: FC = () => {\n    const dispatch = useAppDispatch();\n    const [isLoading,] = useState<boolean>(false);\n    const [isModalOpen, setModalOpen] = useState<boolean>(false);\n    const [selectedItems, setSelectedItems] = useState<any[]>([]);\n    const [, setTotalPrice] = useState<number>(0);\n    const [statement, setStatement] = useState<string>('');\n    const storeItems = useAppSelector((store) => store.store.items);\n\n    const closeModal = () => {\n        dispatch({ type: FETCH_STORE_REQUEST });\n        fetchStoreData()\n            .then(res => {\n                dispatch({ type: FETCH_STORE_SUCCESS, payload: res });\n            })\n            .catch(error => {\n                dispatch({ type: FETCH_STORE_FAILURE, payload: error });\n            });\n        setModalOpen(false);\n    };\n\n    useEffect(() => {\n        // При изменении выбранных товаров пересчитываем общую стоимость\n        const selectedProducts = storeItems.filter((item: TStoreItem) => selectedItems.includes(item.id));\n        const price = selectedProducts.reduce((total: number, product: TStoreItem) => total + product.price, 0);\n        setTotalPrice(price);\n    }, [selectedItems]);\n\n    const handleItemClick = (itemId: any) => {\n        dispatch({ type: SELECT_WAREHOUSE_REQUEST });\n        if (selectedItems.includes(itemId)) {\n            setSelectedItems(selectedItems.filter((id) => id !== itemId));\n        } else {\n            dispatch({ type: SELECT_WAREHOUSE_SUCCESS, payload: itemId });\n            setSelectedItems([itemId]);\n        }\n    };\n\n    const handleAddItemClick = () => {\n        setModalOpen(true)\n        setStatement(ADD_ITEM)\n    }\n\n    const handleAddSupplyClick = () => {\n        setModalOpen(true)\n        setStatement(ADD_SUPPLY)\n    }\n\n    const handleEditItemClick = () => {\n        setModalOpen(true)\n        setStatement(EDIT_ITEM)\n    }\n\n    const handleHideItemClick = () => {\n        setModalOpen(true)\n        setStatement(HIDE_ITEM)\n    }\n    const handleShowItemClick = () => {\n        setModalOpen(true)\n        setStatement(SHOW_ITEM)\n    }\n\n    return (\n        <>\n            <article className={`${styles.mt4}`}>\n\n                <div>\n                    <button className={`${styles.mr4}`} onClick={handleAddItemClick}>Добавить новый товар</button>\n                    <button className={`${styles.mr4}`} onClick={handleAddSupplyClick}>Приход товара</button>\n                </div>\n\n                <div className={`${styles.storeContainer} ${styles.mt4}`}>\n                    <div className={styles.card}>\n                        <table className={styles.table}>\n                            <thead>\n                                <tr>\n                                    <th>Название</th>\n                                    <th>Стоимость</th>\n                                    <th>Количество</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {storeItems.map((item: TStoreItem) => (\n                                    <tr\n                                        key={item.id}\n                                        className={selectedItems.includes(item.id) ? styles.selectedRow : \"\"}\n                                        onClick={() => handleItemClick(item.id)}\n                                    >\n                                        <td>{item.name}</td>\n                                        <td>{item.price}</td>\n                                        <td>{item.qty}</td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    </div>\n\n                    <div className={styles.cart}>\n                        <div className={styles.cartHeader}>\n                            <h2>Редактировать</h2>\n                        </div>\n\n                        <div className={styles.cartBody}>\n                            {selectedItems.length > 0 ? (\n                                <ul>\n                                    {selectedItems.map((itemId) => {\n                                        const item: TStoreItem = storeItems.find((item: TStoreItem) => item.id === itemId);\n                                        return (\n                                            <li key={item.id}>\n                                                <p>Название: <span className={styles.selectedOption}>{item.name}</span></p>\n                                                <p>Стоимость: <span className={styles.selectedOption}>{item.price}</span></p>\n                                                <p>Кол-во: <span className={styles.selectedOption}>{item.qty}</span></p>\n                                            </li>\n                                        )\n                                    })}\n                                </ul>\n                            ) : (\n                                <p>Выбери товар</p>\n                            )}\n                        </div>\n\n                        <div className={styles.cartFooter}>\n                            {selectedItems.map((itemId) => {\n                                const item: TStoreItem = storeItems.find((item: TStoreItem) => item.id === itemId);\n\n                                return (\n                                    <>\n                                        {item.hide\n                                            ? <button className={`${styles.deleteButton} ${styles.mt2}`} onClick={handleShowItemClick} disabled={selectedItems.length === 0}>\n                                                Восстановить\n                                            </button>\n                                            : <button className={`${styles.deleteButton} ${styles.mt2}`} onClick={handleHideItemClick} disabled={selectedItems.length === 0}>\n                                                Удалить\n                                            </button>\n                                        }\n                                    </>\n                                )\n                            })}\n\n                            <button className={`${styles.submitButton} ${styles.mt2}`} onClick={handleEditItemClick} disabled={selectedItems.length === 0}>\n                                Изменить\n                            </button>\n                        </div>\n\n                    </div>\n                </div>\n\n            </article>\n\n            {isLoading && (\n                <Modal onClose={closeModal}>\n                    <div className={styles.modalContent}>\n                        <h1 className=\"text text_type_main-large mb-8\">Оформляем заказ</h1>\n                        <p className=\"text text_type_main-medium text_color_inactive mb-8\">\n                            Подождите пожалуйста, примерное время ожидание 15 сек.\n                        </p>\n                        <FontAwesomeIcon\n                            icon={faSpinner}\n                            spin\n                            size=\"5x\"\n                            className={`${styles.faSpinner}`}\n                        />\n                    </div>\n                </Modal>\n            )}\n\n            {isModalOpen && (\n                <Modal onClose={closeModal} header={\n                    statement === \"addItem\"\n                        ? \"Добавить новый товар\"\n                        : statement === \"addSupply\"\n                            ? \"Приход товаров\"\n                            : statement === \"editItem\"\n                                ? \"Изменение товара\"\n                                : statement === \"removeItem\"\n                                    ? \"Удаление товара\"\n                                    : statement === \"hideItem\"\n                                        ? \"Удалить товар\"\n                                        : statement === \"showItem\"\n                                            ? \"Восстановить товар\" : \"Новое окно\"\n                }>\n                    <WarehouseDetails statement={statement} />\n                </Modal >\n            )}\n        </>\n    );\n};","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/actions/warehouse.ts",["165"],[],"// import { fetchWarehouseData } from \"../../utils/api\";\nimport { useAppDispatch } from \"../hooks/hooks\";\n\nexport const SELECT_WAREHOUSE_REQUEST: \"SELECT_WAREHOUSE_REQUEST\" =\n    \"SELECT_WAREHOUSE_REQUEST\";\nexport const SELECT_WAREHOUSE_SUCCESS: \"SELECT_WAREHOUSE_SUCCESS\" =\n    \"SELECT_WAREHOUSE_SUCCESS\";\nexport const SELECT_WAREHOUSE_FAILURE: \"SELECT_WAREHOUSE_FAILURE\" =\n    \"SELECT_WAREHOUSE_FAILURE\";\n\nexport type TWarehouse =\n    | ISelectWarehouseRequestAction\n    | ISelectWarehouseSuccessAction\n    | ISelectWarehouseFailureAction;\n\nexport interface ISelectWarehouseRequestAction {\n    readonly type: typeof SELECT_WAREHOUSE_REQUEST;\n}\n\nexport interface ISelectWarehouseSuccessAction {\n    readonly type: typeof SELECT_WAREHOUSE_SUCCESS;\n    readonly payload: any;\n}\n\nexport interface ISelectWarehouseFailureAction {\n    readonly type: typeof SELECT_WAREHOUSE_FAILURE;\n    readonly payload: string;\n}\n\nexport const fetchWarehouseRequest = (): ISelectWarehouseRequestAction => ({\n    type: SELECT_WAREHOUSE_REQUEST,\n});\n\nenum ActionTypes {\n    SELECT_WAREHOUSE_REQUEST = \"SELECT_WAREHOUSE_REQUEST\",\n    SELECT_WAREHOUSE_SUCCESS = \"SELECT_WAREHOUSE_SUCCESS\",\n    SELECT_WAREHOUSE_FAILURE = \"SELECT_WAREHOUSE_FAILURE\",\n    FETCH_CONSTRUCTOR_WAREHOUSE_REQUEST = \"FETCH_CONSTRUCTOR_WAREHOUSE_REQUEST\",\n}\n\nexport const fetchWarehouseSuccess = (\n    data: any[]\n): ISelectWarehouseSuccessAction => ({\n    type: ActionTypes.SELECT_WAREHOUSE_SUCCESS,\n    payload: data,\n});\n\nexport const fetchWarehouseFailure = (\n    error: string\n): ISelectWarehouseFailureAction => ({\n    type: SELECT_WAREHOUSE_FAILURE,\n    payload: error,\n});\n// export function getWarehouse() {\n//     return function (dispatch: ReturnType<typeof useAppDispatch>) {\n//         dispatch({\n//             type: SELECT_WAREHOUSE_REQUEST,\n//         });\n\n//         fetchWarehouseData()\n//             .then((res) => {\n//                 dispatch(fetchWarehouseSuccess(res.data));\n//             })\n//             .catch((error) =>\n//                 dispatch(fetchWarehouseFailure(error))\n//             );\n//     };\n// }","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/WarehouseDetails/WarehouseDetails.tsx",["166","167"],[],"import { FC, useEffect, useState } from 'react';\nimport styles from './WarehouseDetails.module.css';\nimport { useAppSelector } from '../../services/hooks/hooks';\nimport { TStoreItem, WarehouseDetailsProps } from '../../services/types/types';\nimport { fetchWarehouseAddItem, fetchWarehouseAddSupply, fetchWarehouseEditItemName, fetchWarehouseEditItemPrice, fetchWarehouseHideItem, fetchWarehouseItem, fetchWarehouseShowItem } from '../../utils/api';\n\nconst WarehouseDetails: FC<WarehouseDetailsProps> = ({ statement }) => {\n    const [itemName, setItemName] = useState<string>('');\n    const [itemPrice, setItemPrice] = useState<number>();\n    const [itemId, setItemId] = useState<number>();\n    const [itemNewName, setItemNewName] = useState<string>('');\n    const [itemNewPrice, setItemNewPrice] = useState<number>();\n    const [loading, isLoading] = useState<boolean>(false);\n    const [finish, setFinish] = useState<boolean>(false);\n    const [finishDescription, setFinishDescription] = useState<string>('');\n    const [error, setError] = useState<boolean>(false);\n    const storeItems = useAppSelector((store) => store.store.items);\n    const warehouseSelectedItem = useAppSelector((store) => store.warehouse.item);\n    const [itemCounts, setItemCounts] = useState<Record<number, number>>({});\n\n    useEffect(() => {\n        fetchWarehouseItem(warehouseSelectedItem)\n            .then(res => {\n                const { id, name, price } = res;\n                setItemId(id);\n                setItemName(name);\n                setItemPrice(price);\n            })\n            .catch(error => {\n                // console.log({ error });\n            });\n    }, [])\n\n    const handleAddItem = () => {\n        fetchWarehouseAddItem(itemName, itemPrice)\n            .then(res => {\n                setFinish(true);\n                setFinishDescription(`Товар \"${itemName}\" по цене ${itemPrice} руб. успешно добавлен на склад`);\n            })\n            .catch(error => {\n                setError(true)\n            });\n    }\n\n    const handleAddSupply = () => {\n        const selectedItems = [];\n        for (const itemId in itemCounts) {\n            if (itemCounts[itemId] > 0) {\n                selectedItems.push({ id: Number(itemId), qty: itemCounts[itemId] });\n            }\n        }\n\n        fetchWarehouseAddSupply(selectedItems)\n            .then(res => {\n                setFinish(true);\n                setFinishDescription(`Приход товаров успешно добавлен`);\n            })\n            .catch(error => {\n                setError(true)\n            });\n    }\n\n    const handleIncrement = (itemId: number, number: number) => {\n        setItemCounts((prevCounts) => ({\n            ...prevCounts,\n            [itemId]: (prevCounts[itemId] || 0) + number\n        }));\n    };\n\n    const handleDecrement = (itemId: number, number: number) => {\n        setItemCounts((prevCounts) => {\n            const currentCount = prevCounts[itemId] || 0;\n            const updatedCount = Math.max(0, currentCount - number);\n            return {\n                ...prevCounts,\n                [itemId]: updatedCount\n            };\n        });\n    };\n\n    const handleEditItem = () => {\n        if (itemNewName) {\n            fetchWarehouseEditItemName(itemId, itemNewName)\n                .then(res => {\n                    setFinish(true);\n                    setFinishDescription(`Название товара успешно изменено`);\n                })\n                .catch(error => {\n                    setError(true)\n                });\n        }\n        if (itemNewPrice) {\n            fetchWarehouseEditItemPrice(itemId, itemNewPrice)\n                .then(res => {\n                    setFinish(true);\n                    setFinishDescription(`Стоимость товара успешно изменена`);\n                })\n                .catch(error => {\n                    setError(true)\n                });\n        }\n    }\n\n    const handleHideItem = () => {\n        fetchWarehouseHideItem(itemId)\n            .then(res => {\n                setFinish(true);\n                setFinishDescription(`Товар успешно удален`);\n            })\n            .catch(error => {\n                setError(true)\n            });\n    }\n    const handleShowItem = () => {\n        fetchWarehouseShowItem(itemId)\n            .then(res => {\n                setFinish(true);\n                setFinishDescription(`Товар успешно восстановлен`);\n            })\n            .catch(error => {\n                setError(true)\n            });\n    }\n\n    const detailsBody = () => {\n        if (finish) {\n            return (\n                <p className={styles.mt4}>{finishDescription}</p>\n            )\n        }\n\n        if (error) {\n            return (\n                <>\n                    <h2>Неопознанная Ошибка!</h2>\n                    <p>Запиши свои действия и опиши проблеум программисту!</p>\n                </>\n            )\n        }\n\n        switch (statement) {\n            case \"addItem\":\n                return (\n                    <ul className={styles.cardList}>\n                        <li className={styles.listItem}>\n                            <p className={styles.listText}>Название товара</p>\n                        </li>\n\n                        <li className={styles.listItem}>\n                            <input className={styles.listInput} type=\"text\" value={itemName} onChange={(event) => setItemName(event.target.value)} placeholder='Название товара' />\n                        </li>\n\n                        <li className={styles.listItem}>\n                            <p className={styles.listText}>Стоимость товара</p>\n                        </li>\n\n                        <li className={styles.listItem}>\n                            <input className={styles.listInput} type=\"text\" value={itemPrice} onChange={(event) => setItemPrice(Number(event.target.value))} placeholder='Стоимость товара' />\n                        </li>\n\n                        <li className={`${styles.listItem} ${styles.mt4}`}>\n                            <button className={styles.listInputSubmit} onClick={handleAddItem}>Добавить</button>\n                        </li>\n                    </ul>\n                )\n            case \"addSupply\":\n                return (\n                    <>\n                        <ul className={`${styles.cardList} ${styles.cardScroll}`}>\n                            {storeItems.map((item: TStoreItem) => {\n                                return (\n                                    <li className={`${styles.listItem} ${styles.supplyContainer} ${styles.alignLeft}`} key={item.id}>\n                                        <div className={styles.containerTitle}>\n                                            {item.name}\n                                        </div>\n                                        <div className={styles.containerCounter}>\n                                            <div className={styles.symbolsCircleContainer}>\n                                                <button className={styles.symbolsCircle} onClick={() => handleDecrement(item.id, 5)}>-5</button>\n                                                <button className={styles.symbolsCircle} onClick={() => handleDecrement(item.id, 1)}>-</button>\n                                            </div>\n                                            {itemCounts[item.id] || 0}\n                                            <div className={styles.symbolsCircleContainer}>\n                                                <button className={styles.symbolsCircle} onClick={() => handleIncrement(item.id, 1)}>+</button>\n                                                <button className={styles.symbolsCircle} onClick={() => handleIncrement(item.id, 5)}>+5</button>\n                                            </div>\n                                        </div>\n                                    </li>\n                                )\n                            })}\n                        </ul>\n                        <div className={`${styles.mt4}`}>\n                            <button className={styles.listInputSubmit} onClick={handleAddSupply}>Подтвердить приход товаров</button>\n                        </div>\n                    </>\n                )\n            case \"editItem\":\n                return (\n                    <>\n                        {!loading\n                            ? <>\n                                <ul className={`${styles.cardList} ${styles.cardScroll}`}>\n\n                                    <li className={`${styles.listItem} ${styles.flexBetween} ${styles.alignLeft}`}>\n                                        <p>Старое название</p>\n                                        <input className={`${styles.listInput} ${styles.ml2}`} type=\"text\" value={itemName} disabled />\n                                    </li>\n\n                                    <li className={`${styles.listItem} ${styles.flexBetween} ${styles.alignLeft}`}>\n                                        <p>Новое название</p>\n                                        <input className={`${styles.listInput} ${styles.ml2}`} type=\"text\" value={itemNewName} onChange={(event) => setItemNewName(event.target.value)} placeholder='Новое название' />\n                                    </li>\n\n                                    <li className={`${styles.listItem} ${styles.flexBetween} ${styles.alignLeft} ${styles.mt4}`}>\n                                        <p>Старая цена</p>\n                                        <input className={`${styles.listInput} ${styles.ml2}`} type=\"text\" value={itemPrice} disabled />\n                                    </li>\n\n                                    <li className={`${styles.listItem} ${styles.flexBetween} ${styles.alignLeft}`}>\n                                        <p>Новая цена</p>\n                                        <input className={`${styles.listInput} ${styles.ml2}`} type=\"text\" value={itemNewPrice} onChange={(event) => setItemNewPrice(Number(event.target.value))} placeholder='Стоимость товара' />\n                                    </li>\n\n                                </ul>\n                                <div className={`${styles.mt4}`}>\n                                    <p>Если не нужно менять один из параметров, оставь поле пустым</p>\n                                </div>\n\n                                <div className={`${styles.mt4}`}>\n                                    <button className={styles.listInputSubmit} onClick={handleEditItem}>Подтвердить изменение</button>\n                                </div>\n                            </>\n                            : <>\n                                Подождите идет загрузка!\n                            </>}\n                    </>\n                )\n            case \"hideItem\":\n                return (\n                    <>\n                        <div className={`${styles.mt4}`}>\n                            <button className={styles.listInputSubmit} onClick={handleHideItem}>Подтвердить удаление</button>\n                        </div>\n                    </>\n                )\n            case \"showItem\":\n                return (\n                    <div className={`${styles.mt4}`}>\n                        <button className={styles.listInputSubmit} onClick={handleShowItem}>Подтвердить восстановление</button>\n                    </div>\n                )\n            default:\n                return (\n                    <p className={styles.mt4}>Данная опиця не найдена</p>\n                )\n        }\n    }\n\n    return (\n        <article>\n            <div className={styles.card}>\n                {detailsBody()}\n            </div>\n        </article>\n    );\n}\n\nexport default WarehouseDetails;","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/ComputerDetails/ComputerDetails.tsx",["168","169"],[],"import { FC, useState } from 'react';\nimport styles from './ComputerDetails.module.css';\nimport { ComputerDetailsProps, TComputer } from '../../services/types/types';\nimport { fetchContinue, fetchFinish, fetchPause, fetchPlay, fetchTechOff, fetchTechOn } from '../../utils/api';\nimport { COMPUTER_STATUS_PLAY, COMPUTER_STATUS_PAUSE, COMPUTER_STATUS_CONTINUE, COMPUTER_STATUS_PLAYING } from '../../utils/constants';\nimport { PaymentSwitcher } from '../PaymentSwitcher/PaymentSwitcher';\nconst ComputerDetails: FC<ComputerDetailsProps> = ({ computer, statement }) => {\n    const [price, setPrice] = useState<number>(0);\n    const [hours, setHours] = useState<number>(0);\n    const [minutes, setMinutes] = useState<number>(0);\n    const [newPrice, setNewPrice] = useState<number>();\n    const [finish, setFinish] = useState<boolean>(false);\n    const [finishDescription, setFinishDescription] = useState<string>('');\n    const [error, setError] = useState<boolean>(false);\n\n    const handleAcceptClick = (computer: TComputer) => {\n        let computerData = {\n            \"id\": computer.id,\n            \"price\": price,\n            \"time\": {\n                hours,\n                minutes\n            }\n        }\n\n        fetchPlay(computerData)\n            .then(res => {\n                setFinish(true);\n                setFinishDescription(\"Бронирование завершено\");\n            })\n            .catch(error => {\n                setError(true)\n            });\n    }\n\n    const handleFinishClick = (computer: TComputer) => {\n        fetchFinish(computer, newPrice)\n            .then(res => {\n                setFinish(true);\n                setFinishDescription(\"Сеанс завершен\");\n            })\n            .catch(error => {\n                setError(true)\n            });\n    }\n\n    const handlePauseClick = (computer: TComputer) => {\n        fetchPause(computer.id)\n            .then(res => {\n                setFinish(true);\n                setFinishDescription(\"Сеанс на паузе\");\n            })\n            .catch(error => {\n                setError(true)\n            });\n    }\n\n    const handleContinueClick = (computer: TComputer) => {\n        fetchContinue(computer.id)\n            .then(res => {\n                setFinish(true);\n                setFinishDescription(\"Сеанс снят с паузы\");\n            })\n            .catch(error => {\n                setError(true)\n            });\n    }\n\n    const handleTechOffClick = (computer: TComputer) => {\n        fetchTechOff(computer.id)\n            .then(res => {\n                setFinish(true);\n                setFinishDescription(\"ПК снят с тех. обслуживания\");\n            })\n            .catch(error => {\n                setError(true)\n            });\n    }\n\n    const handleTechOnClick = (computer: TComputer, reason: string) => {\n        fetchTechOn(computer.id, reason)\n            .then(res => {\n                setFinish(true);\n                setFinishDescription(\"ПК отправлен на тех. обслуживание\");\n            })\n            .catch(error => {\n                setError(true)\n            });\n    }\n\n    const detailsBody = () => {\n        if (finish) {\n            return (\n                <h2>{finishDescription}</h2>\n            )\n        }\n\n        if (error) {\n            return (\n                <>\n                    <h2>Неопознанная Ошибка!</h2>\n                    <p>Запиши свои действия и опиши проблеум программисту!</p>\n                </>\n            )\n        }\n\n        return (\n            <>\n                {statement === COMPUTER_STATUS_PLAY\n                    &&\n                    <>\n                        <h3>Бронирование компьютера</h3>\n                        <ul className={styles.cardList}>\n                            <li className={styles.listItem}>\n                                <p className={styles.listText}>Часов: </p>\n                                <input className={styles.listInput} type=\"text\" value={hours} onChange={(event) => setHours(Number(event.target.value))} placeholder='Час' />\n                            </li>\n\n                            <li className={styles.listItem}>\n                                <p className={styles.listText}>Минут: </p>\n                                <input className={styles.listInput} type=\"text\" value={minutes} onChange={(event) => setMinutes(Number(event.target.value))} placeholder='Минута' />\n                            </li>\n\n                            <li className={styles.listItem}>\n                                <p className={styles.listText}>Сумма: </p>\n                                <input className={styles.listInput} type=\"text\" value={price} onChange={(event) => setPrice(Number(event.target.value))} placeholder='Сумма в рублях' maxLength={6} />\n                            </li>\n                        </ul>\n\n                        <div>\n                            <button className={styles.listInputSubmit} onClick={() => handleAcceptClick(computer)}>Принять</button>\n                        </div>\n                    </>\n                }\n\n                {statement === COMPUTER_STATUS_PLAYING\n                    && <>\n                        <h3>Устройство занято</h3>\n                        <div className={styles.alignLeft}>\n                            <p>\n                                Оплачено: <span className={styles.textBold}>{computer.details?.price} руб.</span>\n                            </p>\n\n                            <p>\n                                Начало <span className={styles.textBold}>{computer.details?.time.from.hours}:{computer.details?.time.from.minutes}</span>\n                            </p>\n\n                            <p>\n                                Конец <span className={styles.textBold}>{computer.details?.time.until.hours}:{computer.details?.time.until.minutes}</span>\n                            </p>\n                        </div>\n\n                        <div className={styles.dualContainer}>\n                            <div>\n                                <ul className={styles.cardList}>\n                                    <li className={styles.listItem}>\n                                        <h3>Поставить сеанс компьютера на паузу</h3>\n                                    </li>\n\n                                    <li>\n                                        <button onClick={() => handlePauseClick(computer)}>Подтвердить</button>\n                                    </li>\n                                </ul>\n                            </div>\n\n                            <div>\n                                <ul className={styles.cardList}>\n                                    <li className={styles.listItem}>\n                                        <h3>Завершить сеанс компьютера</h3>\n                                    </li>\n\n                                    <li className={styles.listItem}>\n                                        <p>Если сумма изменилась, напиши новое значение:</p>\n                                    </li>\n\n                                    <li className={styles.listItem}>\n                                        <input className={`${styles.listInput} ${styles.mr1} ${styles.w100}`} type=\"text\" value={newPrice} onChange={(event) => setNewPrice(Number(event.target.value))} placeholder='Сумма в рублях' maxLength={6} />\n                                        <p>руб.</p>\n                                    </li>\n\n                                    <PaymentSwitcher />\n\n                                    <li className={styles.mt4}>\n                                        <button onClick={() => handleFinishClick(computer)}>Подтвердить</button>\n                                    </li>\n                                </ul>\n                            </div>\n\n                        </div>\n                    </>}\n\n\n                {statement === COMPUTER_STATUS_PAUSE\n                    && <>\n                        <h3>Хотите поставить сеанс компьютера на паузу?</h3>\n\n                        <ul className={styles.cardList}>\n\n                        </ul>\n\n                        <div>\n                            <button onClick={() => handlePauseClick(computer)}>Подтвердить</button>\n                        </div>\n                    </>}\n\n                {statement === COMPUTER_STATUS_CONTINUE\n                    && <>\n                        <>\n                            <h3>Хотите сеанс компьютера снять с паузы?</h3>\n\n                            <ul className={styles.cardList}>\n\n                            </ul>\n\n                            <div>\n                                <button onClick={() => handleContinueClick(computer)}>Подтвердить</button>\n                            </div>\n                        </>\n                    </>}\n            </>\n            // <>\n            //     {statement === COMPUTER_STATUS_PLAY\n            //         ?\n            //         <>\n            //             <h3>Бронирование компьютера</h3>\n            //             <ul className={styles.cardList}>\n            //                 <li className={styles.listItem}>\n            //                     <p className={styles.listText}>Часов: </p>\n            //                     <input className={styles.listInput} type=\"text\" value={hours} onChange={(event) => setHours(Number(event.target.value))} placeholder='Час' />\n            //                 </li>\n\n            //                 <li className={styles.listItem}>\n            //                     <p className={styles.listText}>Минут: </p>\n            //                     <input className={styles.listInput} type=\"text\" value={minutes} onChange={(event) => setMinutes(Number(event.target.value))} placeholder='Минута' />\n            //                 </li>\n\n            //                 <li className={styles.listItem}>\n            //                     <p className={styles.listText}>Сумма: </p>\n            //                     <input className={styles.listInput} type=\"text\" value={price} onChange={(event) => setPrice(Number(event.target.value))} placeholder='Сумма в рублях' maxLength={6} />\n            //                 </li>\n            //             </ul>\n\n            //             <div>\n            //                 <button className={styles.listInputSubmit} onClick={() => handleAcceptClick(computer)}>Принять</button>\n            //             </div>\n            //         </>\n            //         : statement === COMPUTER_STATUS_FINISH ?\n            //             <>\n            //                 <h3>Завершение сеанса компьютера</h3>\n\n            //                 <ul className={styles.cardList}>\n            //                     <li className={styles.listItem}>\n            //                         <p>Если сумма изменилась, напиши новое значение:</p>\n            //                     </li>\n\n            //                     <li className={styles.listItem}>\n            //                         <input className={`${styles.listInput} ${styles.mr1}`} type=\"text\" value={newPrice} onChange={(event) => setNewPrice(Number(event.target.value))} placeholder='Сумма в рублях' maxLength={6} />\n            //                         <p>руб.</p>\n            //                     </li>\n            //                 </ul>\n\n            //                 <div>\n            //                     <button onClick={() => handleFinishClick(computer)}>Подтвердить</button>\n            //                 </div>\n            //             </>\n            //             : statement === COMPUTER_STATUS_PAUSE\n            //                 ? <>\n            //                     <h3>Хотите поставить сеанс компьютера на паузу?</h3>\n\n            //                     <ul className={styles.cardList}>\n\n            //                     </ul>\n\n            //                     <div>\n            //                         <button onClick={() => handlePauseClick(computer)}>Подтвердить</button>\n            //                     </div>\n            //                 </>\n            //                     : statement === COMPUTER_STATUS_TECH_OFF\n            //                         ? <>\n            //                             <h3>Хотите компьютер снять с тех. обслуживания?</h3>\n\n            //                             <ul className={styles.cardList}>\n\n            //                             </ul>\n\n            //                             <div>\n            //                                 <button onClick={() => handleTechOffClick(computer)}>Подтвердить</button>\n            //                             </div>\n            //                         </>\n            //     }\n            // </>\n        )\n    }\n\n    return (\n        <article>\n            <div className={styles.card}>\n                {detailsBody()}\n            </div>\n        </article>\n    );\n}\n\nexport default ComputerDetails;","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/PlaygroundGrid/PlaygroundGrid.tsx",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/PlaygroundSquare/PlaygroundSquare.tsx",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/utils/constants.ts",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/PaymentSwitcher/PaymentSwitcher.tsx",[],[],{"ruleId":"170","severity":1,"message":"171","line":1,"column":10,"nodeType":"172","messageId":"173","endLine":1,"endColumn":19},{"ruleId":"170","severity":1,"message":"174","line":11,"column":25,"nodeType":"172","messageId":"173","endLine":11,"endColumn":39},{"ruleId":"175","severity":1,"message":"176","line":24,"column":8,"nodeType":"177","endLine":24,"endColumn":35,"suggestions":"178"},{"ruleId":"175","severity":1,"message":"176","line":40,"column":8,"nodeType":"177","endLine":40,"endColumn":23,"suggestions":"179"},{"ruleId":"170","severity":1,"message":"180","line":2,"column":10,"nodeType":"172","messageId":"173","endLine":2,"endColumn":24},{"ruleId":"170","severity":1,"message":"181","line":13,"column":21,"nodeType":"172","messageId":"173","endLine":13,"endColumn":30},{"ruleId":"175","severity":1,"message":"182","line":32,"column":8,"nodeType":"177","endLine":32,"endColumn":10,"suggestions":"183"},{"ruleId":"170","severity":1,"message":"184","line":69,"column":11,"nodeType":"172","messageId":"173","endLine":69,"endColumn":29},{"ruleId":"170","severity":1,"message":"185","line":80,"column":11,"nodeType":"172","messageId":"173","endLine":80,"endColumn":28},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'setPaymentType' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'storeItems'. Either include it or remove the dependency array.","ArrayExpression",["186"],["187"],"'useAppDispatch' is defined but never used.","'isLoading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'warehouseSelectedItem'. Either include it or remove the dependency array.",["188"],"'handleTechOffClick' is assigned a value but never used.","'handleTechOnClick' is assigned a value but never used.",{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},"Update the dependencies array to be: [selectedItems, itemCounts, storeItems]",{"range":"195","text":"196"},"Update the dependencies array to be: [selectedItems, storeItems]",{"range":"197","text":"198"},"Update the dependencies array to be: [warehouseSelectedItem]",{"range":"199","text":"200"},[1310,1337],"[selectedItems, itemCounts, storeItems]",[1995,2010],"[selectedItems, storeItems]",[1661,1663],"[warehouseSelectedItem]"]