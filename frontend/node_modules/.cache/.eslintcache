[{"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/index.tsx":"1","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/store.ts":"2","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/App/App.tsx":"3","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/reducers/index.ts":"4","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/utils/routePath.ts":"5","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/actions/store.ts":"6","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/actions/computers.ts":"7","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/hooks/hooks.ts":"8","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/utils/api.ts":"9","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/AppHeader/AppHeader.tsx":"10","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/Modal/Modal.tsx":"11","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/pages/HomePage/HomePage.tsx":"12","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/pages/StorePage/StorePage.tsx":"13","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/pages/StatPage/StatPage.tsx":"14","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/pages/SettingsPage/SettingsPage.tsx":"15","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/pages/WarehousePage/WarehousePage.tsx":"16","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/reducers/computers.ts":"17","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/reducers/warehouse.ts":"18","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/reducers/store.ts":"19","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/ModalOverlay/ModalOverlay.tsx":"20","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/Store/Store.tsx":"21","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/Constructor/Constructor.tsx":"22","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/Warehouse/Warehouse.tsx":"23","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/actions/warehouse.ts":"24","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/ConstructorItem/ConstructorItem.tsx":"25","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/WarehouseDetails/WarehouseDetails.tsx":"26","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/ComputerDetails/ComputerDetails.tsx":"27","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/PlaygroundGrid/PlaygroundGrid.tsx":"28","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/PlaygroundSquare/PlaygroundSquare.tsx":"29"},{"size":623,"mtime":1696740593505,"results":"30","hashOfConfig":"31"},{"size":426,"mtime":1696529578714,"results":"32","hashOfConfig":"31"},{"size":3329,"mtime":1696738852982,"results":"33","hashOfConfig":"31"},{"size":339,"mtime":1696738852985,"results":"34","hashOfConfig":"31"},{"size":189,"mtime":1696738852985,"results":"35","hashOfConfig":"31"},{"size":1848,"mtime":1696738852984,"results":"36","hashOfConfig":"31"},{"size":2016,"mtime":1696530010124,"results":"37","hashOfConfig":"31"},{"size":426,"mtime":1696529878487,"results":"38","hashOfConfig":"31"},{"size":6073,"mtime":1696740244169,"results":"39","hashOfConfig":"31"},{"size":2470,"mtime":1696738852982,"results":"40","hashOfConfig":"31"},{"size":1869,"mtime":1696738852983,"results":"41","hashOfConfig":"31"},{"size":230,"mtime":1696522420312,"results":"42","hashOfConfig":"31"},{"size":280,"mtime":1696522420313,"results":"43","hashOfConfig":"31"},{"size":340,"mtime":1696738852984,"results":"44","hashOfConfig":"31"},{"size":296,"mtime":1696522420312,"results":"45","hashOfConfig":"31"},{"size":300,"mtime":1696738852984,"results":"46","hashOfConfig":"31"},{"size":1049,"mtime":1696530357582,"results":"47","hashOfConfig":"31"},{"size":1045,"mtime":1696738852985,"results":"48","hashOfConfig":"31"},{"size":1009,"mtime":1696738852985,"results":"49","hashOfConfig":"31"},{"size":391,"mtime":1696738852983,"results":"50","hashOfConfig":"31"},{"size":7122,"mtime":1696738852983,"results":"51","hashOfConfig":"31"},{"size":6505,"mtime":1696745388076,"results":"52","hashOfConfig":"31"},{"size":10122,"mtime":1696738852984,"results":"53","hashOfConfig":"31"},{"size":2091,"mtime":1696738852985,"results":"54","hashOfConfig":"31"},{"size":10510,"mtime":1696744956173,"results":"55","hashOfConfig":"31"},{"size":12346,"mtime":1696738852984,"results":"56","hashOfConfig":"31"},{"size":9844,"mtime":1696740289861,"results":"57","hashOfConfig":"31"},{"size":1969,"mtime":1696745750422,"results":"58","hashOfConfig":"31"},{"size":1527,"mtime":1696746161970,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"krbkya",{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"66"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"66"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"66"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"66"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"66"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/index.tsx",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/store.ts",[],[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/App/App.tsx",["154"],[],"import React, { useEffect, useState } from 'react';\nimport styles from './App.module.css';\nimport AppHeader from '../AppHeader/AppHeader';\nimport { HomePage } from '../../pages/HomePage/HomePage';\nimport { SettingsPage } from '../../pages/SettingsPage/SettingsPage';\nimport { StorePage } from '../../pages/StorePage/StorePage';\nimport { StatPage } from '../../pages/StatPage/StatPage';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\n\nimport { DEFAULT_PATH, SETTINGS_PATH, STORE_PATH, STAT_PATH, WAREHOUSE_PATH } from '../../utils/routePath';\nimport { Route, Routes, useLocation, useNavigate } from 'react-router-dom';\nimport { fetchComputersData, fetchStoreData } from '../../utils/api';\nimport { useAppDispatch } from \"../../services/hooks/hooks\";\nimport { FETCH_COMPUTERS_FAILURE, FETCH_COMPUTERS_REQUEST, FETCH_COMPUTERS_SUCCESS } from '../../services/actions/computers';\n\nimport Modal from '../Modal/Modal';\nimport { FETCH_STORE_FAILURE, FETCH_STORE_REQUEST, FETCH_STORE_SUCCESS } from '../../services/actions/store';\nimport { Warehouse } from '../Warehouse/Warehouse';\nimport { WarehousePage } from '../../pages/WarehousePage/WarehousePage';\n\nconst App = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [loading, isLoading] = useState<boolean>(false);\n  const background = location.state && location.state.background;\n  const dispatch = useAppDispatch();\n\n  const closeModal = () => {\n    navigate(-1);\n  };\n\n  useEffect(() => {\n    dispatch({ type: FETCH_COMPUTERS_REQUEST });\n    isLoading(true);\n\n    fetchComputersData()\n      .then(res => {\n        dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n      })\n      .catch(error => {\n        dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n      });\n  }, [dispatch]);\n\n  useEffect(() => {\n    dispatch({ type: FETCH_STORE_REQUEST });\n    isLoading(true);\n\n    fetchStoreData()\n      .then(res => {\n        dispatch({ type: FETCH_STORE_SUCCESS, payload: res });\n      })\n      .catch(error => {\n        dispatch({ type: FETCH_STORE_FAILURE, payload: error });\n      });\n  }, [dispatch]);\n\n  return (\n    <>\n      <AppHeader />\n      {loading\n        ? <>\n          <Routes location={background || location}>\n            <Route path={DEFAULT_PATH} element={<HomePage />} />\n            <Route path={SETTINGS_PATH} element={<SettingsPage />} />\n            <Route path={STAT_PATH} element={<StatPage />} />\n            <Route path={STORE_PATH} element={<StorePage />} />\n            <Route path={WAREHOUSE_PATH} element={<WarehousePage />} />\n          </Routes>\n        </>\n        :\n        <Modal onClose={closeModal} header=\"Загрузка данных\">\n          <div className=\"mb-4 mt-4\">\n          </div>\n          <div>\n            <p className={`${styles.textOrangeColor} text text_type_main-medium mb-8`}>\n              Пожалуйста подождите\n            </p>\n            <div className={`${styles.flex} text_color_inactive`}>\n              <FontAwesomeIcon\n                icon={faSpinner}\n                spin\n                size=\"5x\"\n                className={`${styles.faSpinner}`}\n              />\n            </div>\n          </div>\n        </Modal>\n      }\n\n    </>\n  );\n}\n\nexport default App;","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/reducers/index.ts",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/utils/routePath.ts",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/actions/store.ts",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/actions/computers.ts",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/hooks/hooks.ts",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/utils/api.ts",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/AppHeader/AppHeader.tsx",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/Modal/Modal.tsx",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/pages/HomePage/HomePage.tsx",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/pages/StorePage/StorePage.tsx",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/pages/StatPage/StatPage.tsx",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/pages/SettingsPage/SettingsPage.tsx",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/pages/WarehousePage/WarehousePage.tsx",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/reducers/computers.ts",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/reducers/warehouse.ts",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/reducers/store.ts",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/ModalOverlay/ModalOverlay.tsx",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/Store/Store.tsx",["155"],[],"import React, { FC, useState, useEffect } from 'react';\nimport styles from \"./Store.module.css\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCreditCard, faCoins } from '@fortawesome/free-solid-svg-icons';\nimport { useAppSelector } from '../../services/hooks/hooks';\nimport { TStoreItem } from '../../services/types/types';\nimport { fetchStoreSell } from '../../utils/api';\n\nexport const Store: FC = () => {\n    const [selectedItems, setSelectedItems] = useState<any[]>([]);\n    const [totalPrice, setTotalPrice] = useState<number>(0);\n    const [paymentType, setPaymentType] = useState<string>(\"card\");\n    const [itemCounts, setItemCounts] = useState<Record<number, number>>({});\n\n    const storeItems = useAppSelector((store) => store.store.items.filter((item: any) => item.qty > 0 && item.hide === false));\n\n    const CARD = \"card\";\n    const CASH = \"cash\";\n\n    useEffect(() => {\n        // При изменении выбранных товаров пересчитываем общую стоимость и общее количество\n        const selectedProducts = storeItems.filter((item: TStoreItem) => selectedItems.includes(item.id));\n        const price = selectedProducts.reduce((total: number, product: TStoreItem) => {\n            // Умножаем стоимость на количество из состояния itemCounts\n            const count = itemCounts[product.id] || 0;\n            return total + product.price * count;\n        }, 0);\n        setTotalPrice(price);\n    }, [selectedItems, itemCounts]);\n\n    const handleItemClick = (itemId: any) => {\n        if (selectedItems.includes(itemId)) {\n            setSelectedItems(selectedItems.filter((id) => id !== itemId));\n        } else {\n            setSelectedItems([...selectedItems, itemId]);\n        }\n    };\n\n    const handleIncrement = (itemId: any) => {\n        setItemCounts((prevCounts) => ({\n            ...prevCounts,\n            [itemId]: (prevCounts[itemId] || 0) + 1\n        }));\n    };\n\n    const handleDecrement = (itemId: number) => {\n        setItemCounts((prevCounts) => {\n            const currentCount = prevCounts[itemId] || 0;\n            const updatedCount = Math.max(0, currentCount - 1);\n            return {\n                ...prevCounts,\n                [itemId]: updatedCount\n            };\n        });\n    };\n\n    const handlePaymentTypeChange = (type: string) => {\n        setPaymentType(type);\n    };\n\n    const handleAddToCart = () => {\n        const selectedProducts = storeItems.filter((item: TStoreItem) => selectedItems.includes(item.id))\n            .map((item: TStoreItem) => {\n                const count = itemCounts[item.id] || 0;\n                return { ...item, count };\n            });\n\n        const data = {\n            items: selectedProducts,\n            payment: paymentType\n        };\n\n        fetchStoreSell(data)\n            .then(res => {\n                console.log({ res })\n                // dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n            })\n            .catch(error => {\n                console.log({ error })\n                // dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n            });\n        // setModalOpen(false);\n        setSelectedItems([]);\n    };\n\n    return (\n        <article className={`${styles.storeContainer} ${styles.mt4}`}>\n            <div className={styles.card}>\n                <table className={styles.table}>\n                    <thead>\n                        <tr>\n                            <th>Название</th>\n                            <th>Стоимость</th>\n                            <th>Количество</th>\n                        </tr>\n                    </thead>\n                    <tbody className={styles.cardScroll}>\n                        {storeItems.map((item: TStoreItem) => (\n                            <tr\n                                key={item.id}\n                                className={selectedItems.includes(item.id) ? styles.selectedRow : \"\"}\n                                onClick={() => handleItemClick(item.id)}\n                            >\n                                <td>{item.name}</td>\n                                <td>{item.price}</td>\n                                <td>{item.qty}</td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n\n            <div className={styles.cart}>\n                <div className={styles.cartHeader}>\n                    <h2>Корзина</h2>\n                </div>\n\n                <div className={styles.cartBody}>\n                    {selectedItems.length > 0 ? (\n                        <ul>\n                            {selectedItems.map((itemId) => {\n                                const item = storeItems.find((item: TStoreItem) => item.id === itemId);\n                                return (\n\n                                    <li className={styles.cartRow} key={itemId}>\n                                        {item.name}\n                                        <div className={styles.cartRow}>\n                                            <button className={styles.symbolsCircle} onClick={() => handleDecrement(item.id)}>-</button>\n                                            {itemCounts[item.id] || 0}\n                                            <button className={styles.symbolsCircle} onClick={() => handleIncrement(item.id)}>+</button>\n                                        </div>\n                                    </li>\n                                )\n                            })}\n                        </ul>\n                    ) : (\n                        <p>Корзина пуста</p>\n                    )}\n                </div>\n\n                <div className={styles.cartFooter}>\n\n                    <div className={`${styles.switcher}`}>\n                        <button\n                            className={`${styles.paymentButton} ${paymentType === \"card\" ? styles.activeButton : styles.nonActiveButton}`}\n                            onClick={() => handlePaymentTypeChange(CARD)}\n                        >\n                            <FontAwesomeIcon icon={faCreditCard} /> Безналичный\n                        </button>\n                        <button\n                            className={`${styles.paymentButton} ${paymentType === \"cash\" ? styles.activeButton : styles.nonActiveButton}`}\n                            onClick={() => handlePaymentTypeChange(CASH)}\n                        >\n                            <FontAwesomeIcon icon={faCoins} /> Наличный\n                        </button>\n                    </div>\n\n                    <button className={`${styles.submitButton} ${styles.mt2}`} onClick={handleAddToCart} disabled={selectedItems.length === 0}>\n                        Оплатить\n                        <span>\n                            {totalPrice} руб.\n                        </span>\n                    </button>\n                </div>\n            </div>\n        </article>\n    );\n};","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/Constructor/Constructor.tsx",["156","157","158","159"],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/Warehouse/Warehouse.tsx",["160","161","162","163","164","165"],[],"import React, { FC, useState, useEffect } from 'react';\nimport styles from \"./Warehouse.module.css\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { useAppDispatch, useAppSelector } from '../../services/hooks/hooks';\nimport { TStoreItem } from '../../services/types/types';\nimport { FETCH_STORE_FAILURE, FETCH_STORE_REQUEST, FETCH_STORE_SUCCESS } from '../../services/actions/store';\nimport Modal from '../Modal/Modal';\nimport WarehouseDetails from '../WarehouseDetails/WarehouseDetails';\nimport { fetchStoreData, fetchWarehouseAddItem } from '../../utils/api';\nimport { SELECT_WAREHOUSE_REQUEST, SELECT_WAREHOUSE_SUCCESS } from '../../services/actions/warehouse';\n\nexport const Warehouse: FC = () => {\n    const dispatch = useAppDispatch();\n    const [isLoading,] = useState<boolean>(false);\n    const [isModalOpen, setModalOpen] = useState<boolean>(false);\n    const [selectedItems, setSelectedItems] = useState<any[]>([]);\n    const [totalPrice, setTotalPrice] = useState<number>(0);\n    const [paymentType, setPaymentType] = useState<string>(\"card\");\n    const [statement, setStatement] = useState<string>('');\n\n    const ADD_ITEM = \"addItem\"\n    const ADD_SUPPLY = \"addSupply\"\n    const EDIT_ITEM = \"editItem\"\n    const HIDE_ITEM = \"hideItem\"\n    const SHOW_ITEM = \"showItem\"\n\n    const storeItems = useAppSelector((store) => store.store.items);\n\n    const closeModal = () => {\n        dispatch({ type: FETCH_STORE_REQUEST });\n        fetchStoreData()\n            .then(res => {\n                dispatch({ type: FETCH_STORE_SUCCESS, payload: res });\n            })\n            .catch(error => {\n                dispatch({ type: FETCH_STORE_FAILURE, payload: error });\n            });\n        setModalOpen(false);\n    };\n\n    useEffect(() => {\n        // При изменении выбранных товаров пересчитываем общую стоимость\n        const selectedProducts = storeItems.filter((item: TStoreItem) => selectedItems.includes(item.id));\n\n        const price = selectedProducts.reduce((total: number, product: TStoreItem) => total + product.price, 0);\n        setTotalPrice(price);\n    }, [selectedItems]);\n\n    const handleItemClick = (itemId: any) => {\n        dispatch({ type: SELECT_WAREHOUSE_REQUEST });\n        // dispatch({ type: FETCH_WAREHOUSE_SELECT_FAILURE, payload: error });\n        if (selectedItems.includes(itemId)) {\n            console.log(0)\n            setSelectedItems(selectedItems.filter((id) => id !== itemId));\n        } else {\n            dispatch({ type: SELECT_WAREHOUSE_SUCCESS, payload: itemId });\n            setSelectedItems([itemId]);\n        }\n    };\n\n    const handleSaveEditedItemClick = () => { }\n\n    const handleAddItemClick = () => {\n        setModalOpen(true)\n        setStatement(ADD_ITEM)\n    }\n\n    const handleAddSupplyClick = () => {\n        setModalOpen(true)\n        setStatement(ADD_SUPPLY)\n    }\n\n    const handleEditItemClick = () => {\n        setModalOpen(true)\n        setStatement(EDIT_ITEM)\n    }\n\n    const handleHideItemClick = () => {\n        setModalOpen(true)\n        setStatement(HIDE_ITEM)\n    }\n    const handleShowItemClick = () => {\n        setModalOpen(true)\n        setStatement(SHOW_ITEM)\n    }\n\n\n    return (\n        <>\n            <article className={`${styles.mt4}`}>\n\n                <div>\n                    <button className={`${styles.mr4} ${styles.textBlack}`} onClick={handleAddItemClick}>Добавить новый товар</button>\n                    <button className={`${styles.mr4} ${styles.textBlack}`} onClick={handleAddSupplyClick}>Приход товара</button>\n                </div>\n\n                <div className={`${styles.storeContainer} ${styles.mt4}`}>\n                    <div className={styles.card}>\n                        <table className={styles.table}>\n                            <thead>\n                                <tr>\n                                    <th>Название</th>\n                                    <th>Стоимость</th>\n                                    <th>Количество</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {storeItems.map((item: TStoreItem) => (\n                                    <tr\n                                        key={item.id}\n                                        // key={item.id}\n                                        className={selectedItems.includes(item.id) ? styles.selectedRow : \"\"}\n                                        onClick={() => handleItemClick(item.id)}\n                                    >\n                                        <td>{item.name}</td>\n                                        <td>{item.price}</td>\n                                        <td>{item.qty}</td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    </div>\n\n                    <div className={styles.cart}>\n                        <div className={styles.cartHeader}>\n                            <h2>Редактировать</h2>\n                        </div>\n\n                        <div className={styles.cartBody}>\n                            {selectedItems.length > 0 ? (\n                                <ul>\n                                    {selectedItems.map((itemId) => {\n                                        const item: TStoreItem = storeItems.find((item: TStoreItem) => item.id === itemId);\n\n                                        return (\n                                            <li key={item.id}>\n                                                <p>id: <span className={styles.selectedOption}>{item.id}</span></p>\n                                                <p>Название: <span className={styles.selectedOption}>{item.name}</span></p>\n                                                <p>Стоимость: <span className={styles.selectedOption}>{item.price}</span></p>\n                                                <p>Кол-во: <span className={styles.selectedOption}>{item.qty}</span></p>\n                                            </li>\n                                        )\n                                    })}\n                                </ul>\n                            ) : (\n                                <p>Выбери товар</p>\n                            )}\n                        </div>\n\n                        <div className={styles.cartFooter}>\n                            {selectedItems.map((itemId) => {\n                                const item: TStoreItem = storeItems.find((item: TStoreItem) => item.id === itemId);\n\n                                return (\n                                    <>\n                                        {item.hide\n                                            ? <button className={`${styles.deleteButton} ${styles.mt2}`} onClick={handleShowItemClick} disabled={selectedItems.length === 0}>\n                                                Восстановить\n                                            </button>\n                                            : <button className={`${styles.deleteButton} ${styles.mt2}`} onClick={handleHideItemClick} disabled={selectedItems.length === 0}>\n                                                Удалить\n                                            </button>\n                                        }\n                                    </>\n                                )\n                            })}\n\n\n\n\n                            <button className={`${styles.submitButton} ${styles.mt2}`} onClick={handleEditItemClick} disabled={selectedItems.length === 0}>\n                                Изменить\n                            </button>\n\n                            {/* <button className={`${styles.submitButton} ${styles.mt2}`} onClick={handleSaveEditedItemClick} disabled={selectedItems.length === 0}>\n                                Сохранить\n                            </button> */}\n                        </div>\n\n                    </div>\n                </div>\n\n            </article>\n            {isLoading && (\n                <Modal onClose={closeModal}>\n                    <div className={styles.modalContent}>\n                        <h1 className=\"text text_type_main-large mb-8\">Оформляем заказ</h1>\n                        <p className=\"text text_type_main-medium text_color_inactive mb-8\">\n                            Подождите пожалуйста, примерное время ожидание 15 сек.\n                        </p>\n                        <FontAwesomeIcon\n                            icon={faSpinner}\n                            spin\n                            size=\"5x\"\n                            className={`${styles.faSpinner}`}\n                        />\n                    </div>\n                </Modal>\n            )}\n\n            {isModalOpen && (\n                <Modal onClose={closeModal} header={\n                    statement === \"addItem\"\n                        ? \"Добавить новый товар\"\n                        : statement === \"addSupply\"\n                            ? \"Приход товаров\"\n                            : statement === \"editItem\"\n                                ? \"Изменение товара\"\n                                : statement === \"removeItem\"\n                                    ? \"Удаление товара\"\n                                    : statement === \"hideItem\"\n                                        ? \"Удалить товар\"\n                                        : statement === \"showItem\"\n                                            ? \"Восстановить товар\" : \"Новое окно\"\n                }>\n                    <WarehouseDetails statement={statement} />\n                </Modal >\n            )}\n        </>\n    );\n};","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/actions/warehouse.ts",["166"],[],"// import { fetchWarehouseData } from \"../../utils/api\";\nimport { useAppDispatch } from \"../hooks/hooks\";\n\nexport const SELECT_WAREHOUSE_REQUEST: \"SELECT_WAREHOUSE_REQUEST\" =\n    \"SELECT_WAREHOUSE_REQUEST\";\nexport const SELECT_WAREHOUSE_SUCCESS: \"SELECT_WAREHOUSE_SUCCESS\" =\n    \"SELECT_WAREHOUSE_SUCCESS\";\nexport const SELECT_WAREHOUSE_FAILURE: \"SELECT_WAREHOUSE_FAILURE\" =\n    \"SELECT_WAREHOUSE_FAILURE\";\n\nexport type TWarehouse =\n    | ISelectWarehouseRequestAction\n    | ISelectWarehouseSuccessAction\n    | ISelectWarehouseFailureAction;\n\nexport interface ISelectWarehouseRequestAction {\n    readonly type: typeof SELECT_WAREHOUSE_REQUEST;\n}\n\nexport interface ISelectWarehouseSuccessAction {\n    readonly type: typeof SELECT_WAREHOUSE_SUCCESS;\n    readonly payload: any;\n}\n\nexport interface ISelectWarehouseFailureAction {\n    readonly type: typeof SELECT_WAREHOUSE_FAILURE;\n    readonly payload: string;\n}\n\nexport const fetchWarehouseRequest = (): ISelectWarehouseRequestAction => ({\n    type: SELECT_WAREHOUSE_REQUEST,\n});\n\nenum ActionTypes {\n    SELECT_WAREHOUSE_REQUEST = \"SELECT_WAREHOUSE_REQUEST\",\n    SELECT_WAREHOUSE_SUCCESS = \"SELECT_WAREHOUSE_SUCCESS\",\n    SELECT_WAREHOUSE_FAILURE = \"SELECT_WAREHOUSE_FAILURE\",\n    FETCH_CONSTRUCTOR_WAREHOUSE_REQUEST = \"FETCH_CONSTRUCTOR_WAREHOUSE_REQUEST\",\n}\n\nexport const fetchWarehouseSuccess = (\n    data: any[]\n): ISelectWarehouseSuccessAction => ({\n    type: ActionTypes.SELECT_WAREHOUSE_SUCCESS,\n    payload: data,\n});\n\nexport const fetchWarehouseFailure = (\n    error: string\n): ISelectWarehouseFailureAction => ({\n    type: SELECT_WAREHOUSE_FAILURE,\n    payload: error,\n});\n// export function getWarehouse() {\n//     return function (dispatch: ReturnType<typeof useAppDispatch>) {\n//         dispatch({\n//             type: SELECT_WAREHOUSE_REQUEST,\n//         });\n\n//         fetchWarehouseData()\n//             .then((res) => {\n//                 dispatch(fetchWarehouseSuccess(res.data));\n//             })\n//             .catch((error) =>\n//                 dispatch(fetchWarehouseFailure(error))\n//             );\n//     };\n// }","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/ConstructorItem/ConstructorItem.tsx",["167","168","169","170","171","172","173","174","175","176","177","178"],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/WarehouseDetails/WarehouseDetails.tsx",["179","180","181"],[],"import { FC, useEffect, useState } from 'react';\nimport styles from './WarehouseDetails.module.css';\nimport { useAppSelector } from '../../services/hooks/hooks';\n\nimport { TStoreItem, WarehouseDetailsProps } from '../../services/types/types';\nimport { fetchWarehouseAddItem, fetchWarehouseAddSupply, fetchWarehouseEditItemName, fetchWarehouseEditItemPrice, fetchWarehouseHideItem, fetchWarehouseItem, fetchWarehouseShowItem } from '../../utils/api';\n\nconst WarehouseDetails: FC<WarehouseDetailsProps> = ({ statement }) => {\n    const [itemName, setItemName] = useState<string>('');\n    const [itemPrice, setItemPrice] = useState<number>();\n    const [itemId, setItemId] = useState<number>();\n\n    const [itemNewName, setItemNewName] = useState<string>('');\n    const [itemNewPrice, setItemNewPrice] = useState<number>();\n\n    const [loading, isLoading] = useState<boolean>(false);\n\n    const [finish, setFinish] = useState<boolean>(false);\n    const [finishDescription, setFinishDescription] = useState<string>('');\n    const [error, setError] = useState<boolean>(false);\n\n    const storeItems = useAppSelector((store) => store.store.items);\n    const warehouseSelectedItem = useAppSelector((store) => store.warehouse.item);\n\n    const [itemCounts, setItemCounts] = useState<Record<number, number>>({});\n\n    useEffect(() => {\n        fetchWarehouseItem(warehouseSelectedItem)\n            .then(res => {\n                const { id, name, price } = res;\n                setItemId(id);\n                setItemName(name);\n                setItemPrice(price);\n            })\n            .catch(error => {\n                console.log({ error });\n            });\n    }, [])\n\n    const handleAddItem = () => {\n        fetchWarehouseAddItem(itemName, itemPrice)\n            .then(res => {\n                setFinish(true);\n                setFinishDescription(`Товар \"${itemName}\" по цене ${itemPrice} руб. успешно добавлен на склад`);\n                // dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n            })\n            .catch(error => {\n                setError(true)\n                // dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n            });\n    }\n\n    const handleAddSupply = () => {\n        const selectedItems = [];\n        for (const itemId in itemCounts) {\n            if (itemCounts[itemId] > 0) {\n                selectedItems.push({ id: Number(itemId), qty: itemCounts[itemId] });\n            }\n        }\n\n        fetchWarehouseAddSupply(selectedItems)\n            .then(res => {\n                setFinish(true);\n                setFinishDescription(`Приход товаров успешно добавлен`);\n                // dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n            })\n            .catch(error => {\n                setError(true)\n                // dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n            });\n    }\n\n    const handleIncrement = (itemId: any) => {\n        setItemCounts((prevCounts) => ({\n            ...prevCounts,\n            [itemId]: (prevCounts[itemId] || 0) + 1\n        }));\n    };\n\n    const handleDecrement = (itemId: number) => {\n        setItemCounts((prevCounts) => {\n            const currentCount = prevCounts[itemId] || 0;\n            const updatedCount = Math.max(0, currentCount - 1);\n            return {\n                ...prevCounts,\n                [itemId]: updatedCount\n            };\n        });\n    };\n\n    const handleEditItem = () => {\n        if (itemNewName) {\n            fetchWarehouseEditItemName(itemId, itemNewName)\n                .then(res => {\n                    setFinish(true);\n                    setFinishDescription(`Название товара успешно изменено`);\n                    // dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n                })\n                .catch(error => {\n                    setError(true)\n                    // dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n                });\n        }\n        if (itemNewPrice) {\n            fetchWarehouseEditItemPrice(itemId, itemNewPrice)\n                .then(res => {\n                    setFinish(true);\n                    setFinishDescription(`Стоимость товара успешно изменена`);\n                    // dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n                })\n                .catch(error => {\n                    setError(true)\n                    // dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n                });\n        }\n    }\n\n    const handleHideItem = () => {\n        fetchWarehouseHideItem(itemId)\n            .then(res => {\n                setFinish(true);\n                setFinishDescription(`Товар успешно удален`);\n                // dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n            })\n            .catch(error => {\n                setError(true)\n                // dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n            });\n    }\n    const handleShowItem = () => {\n        fetchWarehouseShowItem(itemId)\n            .then(res => {\n                setFinish(true);\n                setFinishDescription(`Товар успешно восстановлен`);\n                // dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n            })\n            .catch(error => {\n                setError(true)\n                // dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n            });\n    }\n\n\n\n    const detailsBody = () => {\n        if (finish) {\n            return (\n                <>\n                    <p className={styles.mt4}>{finishDescription}</p>\n                </>\n            )\n        }\n\n        if (error) {\n            return (\n                <>\n                    <h2>Неопознанная Ошибка!</h2>\n                    <p>Запиши свои действия и опиши проблеум программисту!</p>\n                </>\n            )\n        }\n\n        switch (statement) {\n            case \"addItem\":\n                return (\n                    <ul className={styles.cardList}>\n                        <li className={styles.listItem}>\n                            <p className={styles.listText}>Название товара</p>\n                        </li>\n\n                        <li className={styles.listItem}>\n                            <input className={styles.listInput} type=\"text\" value={itemName} onChange={(event) => setItemName(event.target.value)} placeholder='Название товара' />\n                        </li>\n\n                        <li className={styles.listItem}>\n                            <p className={styles.listText}>Стоимость товара</p>\n                        </li>\n\n                        <li className={styles.listItem}>\n                            <input className={styles.listInput} type=\"text\" value={itemPrice} onChange={(event) => setItemPrice(Number(event.target.value))} placeholder='Стоимость товара' />\n                        </li>\n\n                        <li className={`${styles.listItem} ${styles.mt4}`}>\n                            <button className={styles.listInputSubmit} onClick={handleAddItem}>Добавить</button>\n                        </li>\n                    </ul>\n                )\n            case \"addSupply\":\n                return (\n                    <>\n                        <ul className={`${styles.cardList} ${styles.cardScroll}`}>\n                            {storeItems.map((item: TStoreItem) => {\n                                return (\n                                    <li className={`${styles.listItem} ${styles.alignLeft}`} key={item.id}>\n                                        {item.name}\n                                        <button className={styles.symbolsCircle} onClick={() => handleDecrement(item.id)}>-</button>\n                                        {itemCounts[item.id] || 0}\n                                        <button className={styles.symbolsCircle} onClick={() => handleIncrement(item.id)}>+</button>\n                                    </li>\n                                )\n                            })}\n                        </ul>\n                        <div className={`${styles.mt4}`}>\n                            <button className={styles.listInputSubmit} onClick={handleAddSupply}>Подтвердить приход товаров</button>\n                        </div>\n                    </>\n                )\n            case \"editItem\":\n                return (\n                    <>\n                        {!loading\n                            ? <>\n                                <ul className={`${styles.cardList} ${styles.cardScroll}`}>\n\n                                    <li className={`${styles.listItem} ${styles.flexBetween} ${styles.alignLeft}`}>\n                                        <p>Старое название</p>\n                                        <input className={`${styles.listInput} ${styles.ml2}`} type=\"text\" value={itemName} disabled />\n                                    </li>\n\n                                    <li className={`${styles.listItem} ${styles.flexBetween} ${styles.alignLeft}`}>\n                                        <p>Новое название</p>\n                                        <input className={`${styles.listInput} ${styles.ml2}`} type=\"text\" value={itemNewName} onChange={(event) => setItemNewName(event.target.value)} placeholder='Новое название' />\n                                    </li>\n\n                                    <li className={`${styles.listItem} ${styles.flexBetween} ${styles.alignLeft} ${styles.mt4}`}>\n                                        <p>Старая цена</p>\n                                        <input className={`${styles.listInput} ${styles.ml2}`} type=\"text\" value={itemPrice} disabled />\n                                    </li>\n\n                                    <li className={`${styles.listItem} ${styles.flexBetween} ${styles.alignLeft}`}>\n                                        <p>Новая цена</p>\n                                        <input className={`${styles.listInput} ${styles.ml2}`} type=\"text\" value={itemNewPrice} onChange={(event) => setItemNewPrice(Number(event.target.value))} placeholder='Стоимость товара' />\n                                    </li>\n\n                                </ul>\n                                <div className={`${styles.mt4}`}>\n                                    <p>Если не нужно менять один из параметров, оставь поле пустым</p>\n                                </div>\n\n                                <div className={`${styles.mt4}`}>\n                                    <button className={styles.listInputSubmit} onClick={handleEditItem}>Подтвердить изменение</button>\n                                </div>\n                            </>\n                            : <>\n                                Подождите идет загрузка!\n                            </>}\n                    </>\n                )\n            case \"hideItem\":\n                return (\n                    <>\n                        <div className={`${styles.mt4}`}>\n                            <button className={styles.listInputSubmit} onClick={handleHideItem}>Подтвердить удаление</button>\n                        </div>\n                    </>\n                )\n            case \"showItem\":\n                return (\n                    <div className={`${styles.mt4}`}>\n                        <button className={styles.listInputSubmit} onClick={handleShowItem}>Подтвердить восстановление</button>\n                    </div>\n                )\n            default:\n                return (\n                    <p className={styles.mt4}>Данная опиця не найдена</p>\n                )\n                break;\n        }\n    }\n\n    return (\n        <article>\n            <div className={styles.card}>\n                {detailsBody()}\n            </div>\n        </article>\n    );\n}\n\nexport default WarehouseDetails;","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/ComputerDetails/ComputerDetails.tsx",["182"],[],"import { FC, useState } from 'react';\nimport styles from './ComputerDetails.module.css';\n// import { fetchOrderNumberRequest, updateOrderNumber } from '../../services/actions/orderDetails';\n\nimport { ComputerDetailsProps, TComputer } from '../../services/types/types';\nimport { fetchContinue, fetchFinish, fetchPause, fetchPlay, fetchTechOff, fetchTechOn } from '../../utils/api';\n\nconst ComputerDetails: FC<ComputerDetailsProps> = ({ computer, statement }) => {\n    const [price, setPrice] = useState<number>(0);\n    const [hours, setHours] = useState<number>(0);\n    const [minutes, setMinutes] = useState<number>(0);\n\n    const [newPrice, setNewPrice] = useState<number>();\n\n    const [finish, setFinish] = useState<boolean>(false);\n    const [finishDescription, setFinishDescription] = useState<string>('');\n    const [error, setError] = useState<boolean>(false);\n\n    const computerStatusPlay = \"Play\";\n    const computerStatusFinish = \"Finish\";\n    const computerStatusPause = \"Pause\";\n    const computerStatusContinue = \"Continue\";\n    const computerStatusTechOff = \"TechOff\";\n\n    // useEffect(() => {\n    //     dispatch(fetchPlayRequest());\n    //     dispatch(updatePlayNumber(computer.id));\n    // }, [dispatch, computer]);\n\n    const handleAcceptClick = (computer: TComputer) => {\n        let computerData = {\n            \"id\": computer.id,\n            \"price\": price,\n            \"time\": {\n                hours,\n                minutes\n            }\n        }\n\n        fetchPlay(computerData)\n            .then(res => {\n                setFinish(true);\n                setFinishDescription(\"Бронирование завершено\");\n                // dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n            })\n            .catch(error => {\n                setError(true)\n                // dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n            });\n    }\n\n    const handleFinishClick = (computer: TComputer) => {\n        fetchFinish(computer, newPrice)\n            .then(res => {\n                setFinish(true);\n                setFinishDescription(\"Сеанс завершен\");\n                // dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n            })\n            .catch(error => {\n                setError(true)\n                // dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n            });\n    }\n\n    const handlePauseClick = (computer: TComputer) => {\n        fetchPause(computer.id)\n            .then(res => {\n                setFinish(true);\n                setFinishDescription(\"Сеанс на паузе\");\n                // dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n            })\n            .catch(error => {\n                setError(true)\n                // dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n            });\n    }\n\n    const handleContinueClick = (computer: TComputer) => {\n        fetchContinue(computer.id)\n            .then(res => {\n                setFinish(true);\n                setFinishDescription(\"Сеанс снят с паузы\");\n                // dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n            })\n            .catch(error => {\n                setError(true)\n                // dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n            });\n    }\n\n    const handleTechOffClick = (computer: TComputer) => {\n        fetchTechOff(computer.id)\n            .then(res => {\n                setFinish(true);\n                setFinishDescription(\"ПК снят с тех. обслуживания\");\n                // dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n            })\n            .catch(error => {\n                setError(true)\n                // dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n            });\n    }\n\n    const handleTechOnClick = (computer: TComputer, reason: string) => {\n        fetchTechOn(computer.id, reason)\n            .then(res => {\n                setFinish(true);\n                setFinishDescription(\"ПК отправлен на тех. обслуживание\");\n                // dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n            })\n            .catch(error => {\n                setError(true)\n                // dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n            });\n    }\n\n    const detailsBody = (computer: TComputer) => {\n        if (finish) {\n            return (\n                <>\n                    <h2>{finishDescription}</h2>\n                </>\n            )\n        }\n\n        if (error) {\n            return (\n                <>\n                    <h2>Неопознанная Ошибка!</h2>\n                    <p>Запиши свои действия и опиши проблеум программисту!</p>\n                </>\n            )\n        }\n\n        return (\n            <>\n                {statement === computerStatusPlay\n                    ?\n                    <>\n                        <h3>Бронирование компьютера</h3>\n                        <ul className={styles.cardList}>\n                            <li className={styles.listItem}>\n                                <p className={styles.listText}>Часов: </p>\n                                <input className={styles.listInput} type=\"text\" value={hours} onChange={(event) => setHours(Number(event.target.value))} placeholder='Час' />\n                            </li>\n\n                            <li className={styles.listItem}>\n                                <p className={styles.listText}>Минут: </p>\n                                <input className={styles.listInput} type=\"text\" value={minutes} onChange={(event) => setMinutes(Number(event.target.value))} placeholder='Минута' />\n                            </li>\n\n                            <li className={styles.listItem}>\n                                <p className={styles.listText}>Сумма: </p>\n                                <input className={styles.listInput} type=\"text\" value={price} onChange={(event) => setPrice(Number(event.target.value))} placeholder='Сумма в рублях' maxLength={6} />\n                            </li>\n                        </ul>\n\n                        <div>\n                            <button className={styles.listInputSubmit} onClick={() => handleAcceptClick(computer)}>Принять</button>\n                        </div>\n                    </>\n                    : statement === computerStatusFinish ?\n                        <>\n                            <h3>Завершение сеанса компьютера</h3>\n\n                            <ul className={styles.cardList}>\n                                <li className={styles.listItem}>\n                                    <p>Если сумма изменилась, напиши новое значение:</p>\n                                </li>\n\n                                <li className={styles.listItem}>\n                                    <input className={`${styles.listInput} ${styles.mr1}`} type=\"text\" value={newPrice} onChange={(event) => setNewPrice(Number(event.target.value))} placeholder='Сумма в рублях' maxLength={6} />\n                                    <p>руб.</p>\n                                </li>\n                            </ul>\n\n                            <div>\n                                <button onClick={() => handleFinishClick(computer)}>Подтвердить</button>\n                            </div>\n                        </>\n                        : statement === computerStatusPause\n                            ? <>\n                                <h3>Хотите поставить сеанс компьютера на паузу?</h3>\n\n                                <ul className={styles.cardList}>\n\n                                </ul>\n\n                                <div>\n                                    <button onClick={() => handlePauseClick(computer)}>Подтвердить</button>\n                                </div>\n                            </>\n                            : statement === computerStatusContinue\n                                ? <>\n                                    <h3>Хотите сеанс компьютера снять с паузы?</h3>\n\n                                    <ul className={styles.cardList}>\n\n                                    </ul>\n\n                                    <div>\n                                        <button onClick={() => handleContinueClick(computer)}>Подтвердить</button>\n                                    </div>\n                                </>\n                                : statement === computerStatusTechOff\n                                    ? <>\n                                        <h3>Хотите компьютер снять с тех. обслуживания?</h3>\n\n                                        <ul className={styles.cardList}>\n\n                                        </ul>\n\n                                        <div>\n                                            <button onClick={() => handleTechOffClick(computer)}>Подтвердить</button>\n                                        </div>\n                                    </>\n                                    : <>Пока ничего</>\n                }\n            </>\n        )\n    }\n\n    return (\n        <article>\n            <h2 className={`${styles.textShadows} text text_type_digits-large mb-8`} data-cy=\"orderNumber\">\n                {computer.name}\n            </h2>\n            <div className={styles.card}>\n                {detailsBody(computer)}\n            </div>\n\n        </article>\n    );\n}\n\nexport default ComputerDetails;","/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/PlaygroundGrid/PlaygroundGrid.tsx",[],[],"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/PlaygroundSquare/PlaygroundSquare.tsx",[],[],{"ruleId":"183","severity":1,"message":"184","line":20,"column":10,"nodeType":"185","messageId":"186","endLine":20,"endColumn":19},{"ruleId":"187","severity":1,"message":"188","line":29,"column":8,"nodeType":"189","endLine":29,"endColumn":35,"suggestions":"190"},{"ruleId":"183","severity":1,"message":"191","line":1,"column":21,"nodeType":"185","messageId":"186","endLine":1,"endColumn":30},{"ruleId":"183","severity":1,"message":"192","line":1,"column":32,"nodeType":"185","messageId":"186","endLine":1,"endColumn":40},{"ruleId":"183","severity":1,"message":"193","line":3,"column":8,"nodeType":"185","messageId":"186","endLine":3,"endColumn":23},{"ruleId":"183","severity":1,"message":"194","line":5,"column":10,"nodeType":"185","messageId":"186","endLine":5,"endColumn":19},{"ruleId":"183","severity":1,"message":"195","line":10,"column":26,"nodeType":"185","messageId":"186","endLine":10,"endColumn":47},{"ruleId":"183","severity":1,"message":"196","line":18,"column":12,"nodeType":"185","messageId":"186","endLine":18,"endColumn":22},{"ruleId":"183","severity":1,"message":"197","line":19,"column":12,"nodeType":"185","messageId":"186","endLine":19,"endColumn":23},{"ruleId":"183","severity":1,"message":"198","line":19,"column":25,"nodeType":"185","messageId":"186","endLine":19,"endColumn":39},{"ruleId":"187","severity":1,"message":"188","line":48,"column":8,"nodeType":"189","endLine":48,"endColumn":23,"suggestions":"199"},{"ruleId":"183","severity":1,"message":"200","line":62,"column":11,"nodeType":"185","messageId":"186","endLine":62,"endColumn":36},{"ruleId":"183","severity":1,"message":"201","line":2,"column":10,"nodeType":"185","messageId":"186","endLine":2,"endColumn":24},{"ruleId":"183","severity":1,"message":"202","line":4,"column":10,"nodeType":"185","messageId":"186","endLine":4,"endColumn":22},{"ruleId":"183","severity":1,"message":"203","line":4,"column":24,"nodeType":"185","messageId":"186","endLine":4,"endColumn":32},{"ruleId":"183","severity":1,"message":"204","line":4,"column":34,"nodeType":"185","messageId":"186","endLine":4,"endColumn":46},{"ruleId":"183","severity":1,"message":"205","line":4,"column":48,"nodeType":"185","messageId":"186","endLine":4,"endColumn":54},{"ruleId":"183","severity":1,"message":"206","line":4,"column":56,"nodeType":"185","messageId":"186","endLine":4,"endColumn":69},{"ruleId":"183","severity":1,"message":"207","line":45,"column":11,"nodeType":"185","messageId":"186","endLine":45,"endColumn":26},{"ruleId":"183","severity":1,"message":"208","line":49,"column":11,"nodeType":"185","messageId":"186","endLine":49,"endColumn":27},{"ruleId":"183","severity":1,"message":"209","line":53,"column":11,"nodeType":"185","messageId":"186","endLine":53,"endColumn":28},{"ruleId":"183","severity":1,"message":"210","line":57,"column":11,"nodeType":"185","messageId":"186","endLine":57,"endColumn":30},{"ruleId":"183","severity":1,"message":"211","line":61,"column":11,"nodeType":"185","messageId":"186","endLine":61,"endColumn":29},{"ruleId":"183","severity":1,"message":"212","line":65,"column":11,"nodeType":"185","messageId":"186","endLine":65,"endColumn":28},{"ruleId":"183","severity":1,"message":"213","line":70,"column":11,"nodeType":"185","messageId":"186","endLine":70,"endColumn":28},{"ruleId":"183","severity":1,"message":"214","line":16,"column":21,"nodeType":"185","messageId":"186","endLine":16,"endColumn":30},{"ruleId":"187","severity":1,"message":"215","line":38,"column":8,"nodeType":"189","endLine":38,"endColumn":10,"suggestions":"216"},{"ruleId":"217","severity":1,"message":"218","line":267,"column":17,"nodeType":"219","messageId":"220","endLine":267,"endColumn":23},{"ruleId":"183","severity":1,"message":"212","line":104,"column":11,"nodeType":"185","messageId":"186","endLine":104,"endColumn":28},"@typescript-eslint/no-unused-vars","'Warehouse' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'storeItems'. Either include it or remove the dependency array.","ArrayExpression",["221"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'ConstructorItem' is defined but never used.","'TComputer' is defined but never used.","'fetchWarehouseAddItem' is defined but never used.","'totalPrice' is assigned a value but never used.","'paymentType' is assigned a value but never used.","'setPaymentType' is assigned a value but never used.",["222"],"'handleSaveEditedItemClick' is assigned a value but never used.","'useAppDispatch' is defined but never used.","'faPlayCircle' is defined but never used.","'faUnlock' is defined but never used.","'faStopCircle' is defined but never used.","'faStop' is defined but never used.","'faPauseCircle' is defined but never used.","'handlePlayClick' is assigned a value but never used.","'handlePauseClick' is assigned a value but never used.","'handleFinishClick' is assigned a value but never used.","'handleContinueClick' is assigned a value but never used.","'handleTechOffClick' is assigned a value but never used.","'handleTechOnClick' is assigned a value but never used.","'computerStatement' is assigned a value but never used.","'isLoading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'warehouseSelectedItem'. Either include it or remove the dependency array.",["223"],"no-unreachable","Unreachable code.","BreakStatement","unreachableCode",{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},"Update the dependencies array to be: [selectedItems, itemCounts, storeItems]",{"range":"230","text":"231"},"Update the dependencies array to be: [selectedItems, storeItems]",{"range":"232","text":"233"},"Update the dependencies array to be: [warehouseSelectedItem]",{"range":"234","text":"235"},[1433,1460],"[selectedItems, itemCounts, storeItems]",[2169,2184],"[selectedItems, storeItems]",[1664,1666],"[warehouseSelectedItem]"]