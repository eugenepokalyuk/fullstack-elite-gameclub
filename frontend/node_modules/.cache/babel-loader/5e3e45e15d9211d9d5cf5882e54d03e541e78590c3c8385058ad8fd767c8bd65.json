{"ast":null,"code":"var _jsxFileName = \"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/PlaygroundGrid/PlaygroundGrid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport styles from './PlaygroundGrid.module.css';\nimport PlaygroundSquare from '../PlaygroundSquare/PlaygroundSquare';\nimport { fetchComputerGridReplace, fetchComputersData } from '../../utils/api';\nimport { useAppDispatch } from '../../services/hooks/hooks';\nimport { FETCH_COMPUTERS_FAILURE, FETCH_COMPUTERS_REQUEST, FETCH_COMPUTERS_SUCCESS } from '../../services/actions/computers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlaygroundGrid = ({\n  playground\n}) => {\n  _s();\n  const gridSize = 200;\n  const squareSize = 18;\n  const [squares, setSquares] = useState([]);\n  const [gridPositionFrom, setGridPositionFrom] = useState();\n  const [gridPositionTo, setGridPositionTo] = useState();\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    const initialSquares = Array.from({\n      length: gridSize\n    }, (_, index) => {\n      const x = index % gridSize * squareSize;\n      const y = Math.floor(index / gridSize) * squareSize;\n      return {\n        id: index,\n        position: {\n          x,\n          y\n        }\n      };\n    });\n    setSquares(initialSquares);\n  }, []);\n  useEffect(() => {\n    dispatch({\n      type: FETCH_COMPUTERS_REQUEST\n    });\n    isLoading(true);\n    fetchComputersData().then(res => {\n      dispatch({\n        type: FETCH_COMPUTERS_SUCCESS,\n        payload: res\n      });\n    }).catch(error => {\n      dispatch({\n        type: FETCH_COMPUTERS_FAILURE,\n        payload: error\n      });\n    });\n  }, [dispatch]);\n  const handleDragStart = (e, id) => {\n    setGridPositionFrom(id);\n    e.dataTransfer.setData(\"text/plain\", id.toString());\n  };\n  const handleDragOver = e => {\n    e.preventDefault();\n  };\n  const handleDrop = (e, id) => {\n    e.preventDefault();\n    const squareId = Number(e.dataTransfer.getData(\"text/plain\"));\n    const updatedSquares = squares.map(square => {\n      if (square.id === squareId) {\n        return {\n          ...square,\n          position: {\n            x: e.clientX,\n            y: e.clientY\n          }\n        };\n      }\n      return square;\n    });\n    setSquares(updatedSquares);\n    fetchComputerGridReplace(gridPositionFrom, id);\n\n    // console.log(\"squares\", squares.find((item) => {\n    // item\n    // }))\n\n    // dispatch({ type: FETCH_COMPUTERS_REQUEST });\n    // fetchComputersData()\n    //     .then(res => {\n    //         dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n    //     })\n    //     .catch(error => {\n    //         dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n    //     });\n  };\n\n  // useEffect(() => {\n  //     dispatch({ type: FETCH_COMPUTERS_REQUEST });\n  //     fetchComputersData()\n  //         .then(res => {\n  //             dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n  //         })\n  //         .catch(error => {\n  //             dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n  //         });\n  // }, [dispatch])\n\n  const renderSquares = () => {\n    return squares.map(square => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(PlaygroundSquare, {\n          id: square.id,\n          position: square.position,\n          onDragStart: handleDragStart,\n          onDragOver: handleDragOver,\n          onDrop: handleDrop,\n          playground: playground\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)\n      }, square.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: styles.article,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.grid,\n      children: renderSquares()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n};\n_s(PlaygroundGrid, \"ZfGg3JgUAUhwyMfoHokZZXqS+p4=\", false, function () {\n  return [useAppDispatch];\n});\n_c = PlaygroundGrid;\nexport default PlaygroundGrid;\nvar _c;\n$RefreshReg$(_c, \"PlaygroundGrid\");","map":{"version":3,"names":["React","useEffect","useState","styles","PlaygroundSquare","fetchComputerGridReplace","fetchComputersData","useAppDispatch","FETCH_COMPUTERS_FAILURE","FETCH_COMPUTERS_REQUEST","FETCH_COMPUTERS_SUCCESS","jsxDEV","_jsxDEV","PlaygroundGrid","playground","_s","gridSize","squareSize","squares","setSquares","gridPositionFrom","setGridPositionFrom","gridPositionTo","setGridPositionTo","dispatch","initialSquares","Array","from","length","_","index","x","y","Math","floor","id","position","type","isLoading","then","res","payload","catch","error","handleDragStart","e","dataTransfer","setData","toString","handleDragOver","preventDefault","handleDrop","squareId","Number","getData","updatedSquares","map","square","clientX","clientY","renderSquares","children","onDragStart","onDragOver","onDrop","fileName","_jsxFileName","lineNumber","columnNumber","className","article","grid","_c","$RefreshReg$"],"sources":["/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/PlaygroundGrid/PlaygroundGrid.tsx"],"sourcesContent":["import React, { FC, useEffect, useState } from 'react';\nimport styles from './PlaygroundGrid.module.css';\nimport { TComputer } from '../../services/types/types';\nimport PlaygroundSquare from '../PlaygroundSquare/PlaygroundSquare';\nimport { fetchComputerGridReplace, fetchComputersData } from '../../utils/api';\nimport { useAppDispatch } from '../../services/hooks/hooks';\nimport { FETCH_COMPUTERS_FAILURE, FETCH_COMPUTERS_REQUEST, FETCH_COMPUTERS_SUCCESS } from '../../services/actions/computers';\n\nconst PlaygroundGrid: FC<{ playground: TComputer[] }> = ({ playground }) => {\n    const gridSize = 200;\n    const squareSize = 18;\n    const [squares, setSquares] = useState<{ id: number; position: { x: number; y: number } }[]>([]);\n\n    const [gridPositionFrom, setGridPositionFrom] = useState<number>();\n    const [gridPositionTo, setGridPositionTo] = useState<number>();\n\n    const dispatch = useAppDispatch();\n\n    useEffect(() => {\n        const initialSquares = Array.from({ length: gridSize }, (_, index) => {\n            const x = (index % gridSize) * squareSize;\n            const y = Math.floor(index / gridSize) * squareSize;\n            return { id: index, position: { x, y } };\n        });\n\n        setSquares(initialSquares);\n    }, []);\n\n    useEffect(() => {\n        dispatch({ type: FETCH_COMPUTERS_REQUEST });\n        isLoading(true);\n    \n        fetchComputersData()\n          .then(res => {\n            dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n          })\n          .catch(error => {\n            dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n          });\n      }, [dispatch]);\n\n    const handleDragStart = (e: React.DragEvent<HTMLDivElement>, id: number) => {\n        setGridPositionFrom(id);\n\n        e.dataTransfer.setData(\"text/plain\", id.toString());\n    };\n\n    const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n    };\n\n    const handleDrop = (e: React.DragEvent<HTMLDivElement>, id: number) => {\n        e.preventDefault();\n        const squareId = Number(e.dataTransfer.getData(\"text/plain\"));\n\n        const updatedSquares = squares.map((square) => {\n            if (square.id === squareId) {\n                return {\n                    ...square,\n                    position: { x: e.clientX, y: e.clientY },\n                };\n            }\n            return square;\n        });\n\n        setSquares(updatedSquares);\n\n        fetchComputerGridReplace(gridPositionFrom, id);\n\n        // console.log(\"squares\", squares.find((item) => {\n        // item\n        // }))\n\n        // dispatch({ type: FETCH_COMPUTERS_REQUEST });\n        // fetchComputersData()\n        //     .then(res => {\n        //         dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n        //     })\n        //     .catch(error => {\n        //         dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n        //     });\n    };\n\n    // useEffect(() => {\n    //     dispatch({ type: FETCH_COMPUTERS_REQUEST });\n    //     fetchComputersData()\n    //         .then(res => {\n    //             dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n    //         })\n    //         .catch(error => {\n    //             dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n    //         });\n    // }, [dispatch])\n\n    const renderSquares = () => {\n        return squares.map((square) => {\n            return (\n                <div key={square.id}>\n                    <PlaygroundSquare\n                        id={square.id}\n                        position={square.position}\n                        onDragStart={handleDragStart}\n                        onDragOver={handleDragOver}\n                        onDrop={handleDrop}\n                        playground={playground}\n                    />\n                </div>\n            );\n        });\n    };\n\n    return (\n        <article className={styles.article}>\n            <div className={styles.grid}>\n                {renderSquares()}\n            </div>\n        </article>\n    );\n}\n\nexport default PlaygroundGrid;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}