{"ast":null,"code":"var _jsxFileName = \"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/PlaygroundGrid/PlaygroundGrid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport styles from './PlaygroundGrid.module.css';\nimport PlaygroundSquare from '../PlaygroundSquare/PlaygroundSquare';\nimport { fetchComputerGridReplace, fetchComputersData } from '../../utils/api';\nimport { useAppDispatch, useAppSelector } from '../../services/hooks/hooks';\nimport { FETCH_COMPUTERS_FAILURE, FETCH_COMPUTERS_REQUEST, FETCH_COMPUTERS_SUCCESS } from '../../services/actions/computers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlaygroundGrid = () => {\n  _s();\n  // { playground: TComputer[] }\n  const dispatch = useAppDispatch();\n  const playground = useAppSelector(store => store.playground.computers);\n  const gridSize = 200;\n  const squareSize = 18;\n  const [squares, setSquares] = useState([]);\n  const [gridPositionFrom, setGridPositionFrom] = useState();\n  const [gridPositionTo, setGridPositionTo] = useState();\n  const [dragStart, setDragStart] = useState();\n  useEffect(() => {\n    const initialSquares = Array.from({\n      length: gridSize\n    }, (_, index) => {\n      // const x = (index % gridSize) * squareSize;\n      // const y = Math.floor(index / gridSize) * squareSize;\n      return {\n        id: index\n      };\n    });\n    setSquares(initialSquares);\n  }, []);\n  const handleDragStart = (e, id) => {\n    setGridPositionFrom(id);\n    setDragStart(id);\n    e.dataTransfer.setData(\"text/plain\", id.toString());\n  };\n  const handleDragOver = e => {\n    e.preventDefault();\n  };\n  const handleDrop = (e, id) => {\n    setGridPositionTo(id);\n    e.preventDefault();\n    fetchComputerGridReplace(dragStart, id);\n    dispatch({\n      type: FETCH_COMPUTERS_REQUEST\n    });\n    fetchComputersData().then(res => {\n      dispatch({\n        type: FETCH_COMPUTERS_SUCCESS,\n        payload: res\n      });\n    }).catch(error => {\n      dispatch({\n        type: FETCH_COMPUTERS_FAILURE,\n        payload: error\n      });\n    });\n  };\n  const renderSquares = () => {\n    return squares.map(square => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(PlaygroundSquare, {\n          id: square.id,\n          position: square.position,\n          onDragStart: handleDragStart,\n          onDragOver: handleDragOver,\n          onDrop: handleDrop,\n          playground: playground\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)\n      }, square.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: styles.article,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.grid,\n      children: renderSquares()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n_s(PlaygroundGrid, \"SiJq9kZdPs5TzoMgOl0xP4fiES8=\", false, function () {\n  return [useAppDispatch, useAppSelector];\n});\n_c = PlaygroundGrid;\nexport default PlaygroundGrid;\nvar _c;\n$RefreshReg$(_c, \"PlaygroundGrid\");","map":{"version":3,"names":["React","useEffect","useState","styles","PlaygroundSquare","fetchComputerGridReplace","fetchComputersData","useAppDispatch","useAppSelector","FETCH_COMPUTERS_FAILURE","FETCH_COMPUTERS_REQUEST","FETCH_COMPUTERS_SUCCESS","jsxDEV","_jsxDEV","PlaygroundGrid","_s","dispatch","playground","store","computers","gridSize","squareSize","squares","setSquares","gridPositionFrom","setGridPositionFrom","gridPositionTo","setGridPositionTo","dragStart","setDragStart","initialSquares","Array","from","length","_","index","id","handleDragStart","e","dataTransfer","setData","toString","handleDragOver","preventDefault","handleDrop","type","then","res","payload","catch","error","renderSquares","map","square","children","position","onDragStart","onDragOver","onDrop","fileName","_jsxFileName","lineNumber","columnNumber","className","article","grid","_c","$RefreshReg$"],"sources":["/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/PlaygroundGrid/PlaygroundGrid.tsx"],"sourcesContent":["import React, { FC, useEffect, useState } from 'react';\nimport styles from './PlaygroundGrid.module.css';\nimport { TComputer } from '../../services/types/types';\nimport PlaygroundSquare from '../PlaygroundSquare/PlaygroundSquare';\nimport { fetchComputerGridReplace, fetchComputersData } from '../../utils/api';\nimport { useAppDispatch, useAppSelector } from '../../services/hooks/hooks';\nimport { FETCH_COMPUTERS_FAILURE, FETCH_COMPUTERS_REQUEST, FETCH_COMPUTERS_SUCCESS } from '../../services/actions/computers';\n\nconst PlaygroundGrid: FC = () => {\n    // { playground: TComputer[] }\n    const dispatch = useAppDispatch();\n\n    const playground = useAppSelector(\n        (store) => store.playground.computers\n    );\n\n    const gridSize = 200;\n    const squareSize = 18;\n    const [squares, setSquares] = useState<{ id: number }[]>([]);\n\n    const [gridPositionFrom, setGridPositionFrom] = useState<number>();\n    const [gridPositionTo, setGridPositionTo] = useState<number>();\n\n    const [dragStart, setDragStart] = useState<number>();\n\n    useEffect(() => {\n        const initialSquares = Array.from({ length: gridSize }, (_, index) => {\n            // const x = (index % gridSize) * squareSize;\n            // const y = Math.floor(index / gridSize) * squareSize;\n            return { id: index };\n        });\n\n        setSquares(initialSquares);\n\n    }, []);\n\n    const handleDragStart = (e: React.DragEvent<HTMLDivElement>, id: number) => {\n        setGridPositionFrom(id);\n        setDragStart(id)\n        e.dataTransfer.setData(\"text/plain\", id.toString());\n    };\n\n    const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n    };\n\n    const handleDrop = (e: React.DragEvent<HTMLDivElement>, id: number) => {\n        setGridPositionTo(id);\n        e.preventDefault();\n\n        fetchComputerGridReplace(dragStart, id);\n\n        dispatch({ type: FETCH_COMPUTERS_REQUEST });\n        fetchComputersData()\n            .then(res => {\n                dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n            })\n            .catch(error => {\n                dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n            });\n    };\n\n    const renderSquares = () => {\n        return squares.map((square) => {\n            return (\n                <div key={square.id}>\n                    <PlaygroundSquare\n                        id={square.id}\n                        position={square.position}\n                        onDragStart={handleDragStart}\n                        onDragOver={handleDragOver}\n                        onDrop={handleDrop}\n                        playground={playground}\n                    />\n                </div>\n            );\n        });\n    };\n\n    return (\n        <article className={styles.article}>\n            <div className={styles.grid}>\n                {renderSquares()}\n            </div>\n        </article>\n    );\n}\n\nexport default PlaygroundGrid;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}