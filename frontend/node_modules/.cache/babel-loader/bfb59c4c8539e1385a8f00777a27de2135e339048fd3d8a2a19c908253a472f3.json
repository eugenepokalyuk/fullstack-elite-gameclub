{"ast":null,"code":"var _jsxFileName = \"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/PlaygroundGrid/PlaygroundGrid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport styles from './PlaygroundGrid.module.css';\nimport PlaygroundSquare from '../PlaygroundSquare/PlaygroundSquare';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlaygroundGrid = ({\n  playground\n}) => {\n  _s();\n  const gridSize = 200;\n  const squareSize = 18;\n  const [squares, setSquares] = useState([]);\n  const [gridPositionFrom, setGridPositionFrom] = useState();\n  const [gridPositionTo, setGridPositionTo] = useState();\n  useEffect(() => {\n    const initialSquares = Array.from({\n      length: gridSize\n    }, (_, index) => {\n      const x = index % gridSize * squareSize;\n      const y = Math.floor(index / gridSize) * squareSize;\n      return {\n        id: index,\n        position: {\n          x,\n          y\n        }\n      };\n    });\n    setSquares(initialSquares);\n  }, []);\n  const handleDragStart = (e, id) => {\n    setGridPositionTo(id);\n    e.dataTransfer.setData(\"text/plain\", id.toString());\n  };\n  const handleDragOver = e => {\n    e.preventDefault();\n  };\n  const handleDrop = (e, id) => {\n    e.preventDefault();\n    const squareId = Number(e.dataTransfer.getData(\"text/plain\"));\n    const updatedSquares = squares.map(square => {\n      if (square.id === squareId) {\n        return {\n          ...square,\n          position: {\n            x: e.clientX,\n            y: e.clientY\n          }\n        };\n      }\n      return square;\n    });\n    setGridPositionTo(squareId);\n    setSquares(updatedSquares);\n    const computer = playground.find(item => item.id === id);\n    // fetchComputerGridReplace(2, 42);\n  };\n\n  const handleClick = () => {\n    const computerId = playground.find(item => item.id);\n    const computerGridId = playground.find(item => item.grid_id);\n    console.log(\"123\", {\n      computerId,\n      computerGridId\n    });\n  };\n  const renderSquares = () => {\n    return squares.map(square => {\n      const {\n        id,\n        position\n      } = square;\n      const computer = playground.find(item => id === item.id);\n      // const computer = playground.find((item) => item.id === id);\n      // const computerId = playground.find((item) => item.id);\n      // const computerGridId = playground.find((item) => item.grid_id);\n      // console.log({ computerId, computerGridId });\n\n      return (\n        /*#__PURE__*/\n        // <div key={square.id} className={`${computer?.grid_id === id && styles.square}`}>\n        _jsxDEV(\"div\", {\n          className: `${(computer === null || computer === void 0 ? void 0 : computer.grid_id) === square.id && styles.square}`,\n          children: /*#__PURE__*/_jsxDEV(PlaygroundSquare, {\n            id: id,\n            position: position,\n            onDragStart: handleDragStart,\n            onDragOver: handleDragOver,\n            onDrop: handleDrop,\n            computer: computer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 21\n          }, this)\n        }, square.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, this)\n      );\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: styles.article,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.grid,\n      children: renderSquares()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n_s(PlaygroundGrid, \"AiHRBWUwm4sfIpft7Vby3sJJUks=\");\n_c = PlaygroundGrid;\nexport default PlaygroundGrid;\nvar _c;\n$RefreshReg$(_c, \"PlaygroundGrid\");","map":{"version":3,"names":["React","useEffect","useState","styles","PlaygroundSquare","jsxDEV","_jsxDEV","PlaygroundGrid","playground","_s","gridSize","squareSize","squares","setSquares","gridPositionFrom","setGridPositionFrom","gridPositionTo","setGridPositionTo","initialSquares","Array","from","length","_","index","x","y","Math","floor","id","position","handleDragStart","e","dataTransfer","setData","toString","handleDragOver","preventDefault","handleDrop","squareId","Number","getData","updatedSquares","map","square","clientX","clientY","computer","find","item","handleClick","computerId","computerGridId","grid_id","console","log","renderSquares","className","children","onDragStart","onDragOver","onDrop","fileName","_jsxFileName","lineNumber","columnNumber","article","grid","_c","$RefreshReg$"],"sources":["/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/PlaygroundGrid/PlaygroundGrid.tsx"],"sourcesContent":["import React, { FC, useEffect, useState } from 'react';\nimport styles from './PlaygroundGrid.module.css';\nimport { TComputer } from '../../services/types/types';\nimport PlaygroundSquare from '../PlaygroundSquare/PlaygroundSquare';\nimport { fetchComputerGridReplace } from '../../utils/api';\n\nconst PlaygroundGrid: FC<{ playground: TComputer[] }> = ({ playground }) => {\n    const gridSize = 200;\n    const squareSize = 18;\n    const [squares, setSquares] = useState<{ id: number; position: { x: number; y: number } }[]>([]);\n\n    const [gridPositionFrom, setGridPositionFrom] = useState<number>();\n    const [gridPositionTo, setGridPositionTo] = useState<number>();\n\n    useEffect(() => {\n        const initialSquares = Array.from({ length: gridSize }, (_, index) => {\n            const x = (index % gridSize) * squareSize;\n            const y = Math.floor(index / gridSize) * squareSize;\n            return { id: index, position: { x, y } };\n        });\n\n        setSquares(initialSquares);\n    }, []);\n\n    const handleDragStart = (e: React.DragEvent<HTMLDivElement>, id: number) => {\n        setGridPositionTo(id);\n\n        e.dataTransfer.setData(\"text/plain\", id.toString());\n    };\n\n    const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n    };\n\n    const handleDrop = (e: React.DragEvent<HTMLDivElement>, id: number) => {\n        e.preventDefault();\n        const squareId = Number(e.dataTransfer.getData(\"text/plain\"));\n\n        const updatedSquares = squares.map((square) => {\n            if (square.id === squareId) {\n                return {\n                    ...square,\n                    position: { x: e.clientX, y: e.clientY },\n                };\n            }\n            return square;\n        });\n\n        setGridPositionTo(squareId);\n\n        setSquares(updatedSquares);\n\n        const computer = playground.find((item) => item.id === id);\n        // fetchComputerGridReplace(2, 42);\n    };\n\n    const handleClick = () => {\n        const computerId = playground.find((item) => item.id);\n        const computerGridId = playground.find((item) => item.grid_id);\n        console.log(\"123\", {\n            computerId,\n            computerGridId\n        })\n    }\n\n    const renderSquares = () => {\n        return squares.map((square) => {\n            const { id, position } = square;\n            const computer = playground.find((item) => id === item.id);\n            // const computer = playground.find((item) => item.id === id);\n            // const computerId = playground.find((item) => item.id);\n            // const computerGridId = playground.find((item) => item.grid_id);\n            // console.log({ computerId, computerGridId });\n\n            return (\n                // <div key={square.id} className={`${computer?.grid_id === id && styles.square}`}>\n                <div key={square.id} className={`${computer?.grid_id === square.id && styles.square}`}>\n                    <PlaygroundSquare\n                        id={id}\n                        position={position}\n                        onDragStart={handleDragStart}\n                        onDragOver={handleDragOver}\n                        onDrop={handleDrop}\n                        computer={computer}\n                    />\n                </div>\n            );\n        });\n    };\n\n    return (\n        <article className={styles.article}>\n            <div className={styles.grid}>\n                {renderSquares()}\n            </div>\n        </article>\n    );\n}\n\nexport default PlaygroundGrid;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}