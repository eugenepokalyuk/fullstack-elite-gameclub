{"ast":null,"code":"var _jsxFileName = \"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/PlaygroundGrid/PlaygroundGrid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport styles from './PlaygroundGrid.module.css';\nimport PlaygroundSquare from '../PlaygroundSquare/PlaygroundSquare';\nimport { fetchComputerGridReplace, fetchComputersData } from '../../utils/api';\nimport { useAppDispatch, useAppSelector } from '../../services/hooks/hooks';\nimport { FETCH_COMPUTERS_FAILURE, FETCH_COMPUTERS_REQUEST, FETCH_COMPUTERS_SUCCESS } from '../../services/actions/computers';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlaygroundGrid = () => {\n  _s();\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const [loading, isLoading] = useState(false);\n  const playground = useAppSelector(store => store.playground.computers);\n  const gridSize = 200;\n  const [squares, setSquares] = useState([]);\n  const [dragStart, setDragStart] = useState();\n  const closeModal = () => {\n    navigate(-1);\n  };\n  useEffect(() => {\n    const initialSquares = Array.from({\n      length: gridSize\n    }, (_, index) => {\n      return {\n        id: index\n      };\n    });\n    setSquares(initialSquares);\n  }, []);\n  useEffect(() => {\n    fetchComputersData().then(res => {\n      dispatch({\n        type: FETCH_COMPUTERS_SUCCESS,\n        payload: res\n      });\n    }).catch(error => {\n      dispatch({\n        type: FETCH_COMPUTERS_FAILURE,\n        payload: error\n      });\n    });\n  }, [dispatch]);\n  const handleDragStart = (e, id) => {\n    if (id) {\n      setDragStart(id);\n    }\n  };\n  const handleDragOver = e => {\n    e.preventDefault();\n  };\n  const handleDrop = (e, id) => {\n    e.preventDefault();\n    if (id) {\n      fetchComputerGridReplace(dragStart, id);\n      dispatch({\n        type: FETCH_COMPUTERS_REQUEST\n      });\n      fetchComputersData().then(res => {\n        dispatch({\n          type: FETCH_COMPUTERS_SUCCESS,\n          payload: res\n        });\n      }).catch(error => {\n        dispatch({\n          type: FETCH_COMPUTERS_FAILURE,\n          payload: error\n        });\n      });\n    }\n  };\n  const renderSquares = () => {\n    return squares.map(square => {\n      return /*#__PURE__*/_jsxDEV(PlaygroundSquare, {\n        id: square.id,\n        onDragStart: handleDragStart,\n        onDragOver: handleDragOver,\n        onDrop: handleDrop,\n        playground: playground\n      }, square.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: styles.article,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.grid,\n      children: renderSquares()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n_s(PlaygroundGrid, \"i7mtCI133RO8sNFnQHgDJUvCq/0=\", false, function () {\n  return [useAppDispatch, useNavigate, useAppSelector];\n});\n_c = PlaygroundGrid;\nexport default PlaygroundGrid;\nvar _c;\n$RefreshReg$(_c, \"PlaygroundGrid\");","map":{"version":3,"names":["React","useEffect","useState","styles","PlaygroundSquare","fetchComputerGridReplace","fetchComputersData","useAppDispatch","useAppSelector","FETCH_COMPUTERS_FAILURE","FETCH_COMPUTERS_REQUEST","FETCH_COMPUTERS_SUCCESS","useNavigate","jsxDEV","_jsxDEV","PlaygroundGrid","_s","dispatch","navigate","loading","isLoading","playground","store","computers","gridSize","squares","setSquares","dragStart","setDragStart","closeModal","initialSquares","Array","from","length","_","index","id","then","res","type","payload","catch","error","handleDragStart","e","handleDragOver","preventDefault","handleDrop","renderSquares","map","square","onDragStart","onDragOver","onDrop","fileName","_jsxFileName","lineNumber","columnNumber","className","article","children","grid","_c","$RefreshReg$"],"sources":["/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/PlaygroundGrid/PlaygroundGrid.tsx"],"sourcesContent":["import React, { FC, useEffect, useState } from 'react';\nimport styles from './PlaygroundGrid.module.css';\nimport { TComputer } from '../../services/types/types';\nimport PlaygroundSquare from '../PlaygroundSquare/PlaygroundSquare';\nimport { fetchComputerGridReplace, fetchComputersData } from '../../utils/api';\nimport { useAppDispatch, useAppSelector } from '../../services/hooks/hooks';\nimport { FETCH_COMPUTERS_FAILURE, FETCH_COMPUTERS_REQUEST, FETCH_COMPUTERS_SUCCESS } from '../../services/actions/computers';\n\nimport { useNavigate } from 'react-router-dom';\n\nconst PlaygroundGrid: FC = () => {\n    const dispatch = useAppDispatch();\n    const navigate = useNavigate();\n\n    const [loading, isLoading] = useState<boolean>(false);\n\n    const playground = useAppSelector(\n        (store) => store.playground.computers\n    );\n\n    const gridSize = 200;\n    const [squares, setSquares] = useState<{ id: number }[]>([]);\n    const [dragStart, setDragStart] = useState<number>();\n\n    const closeModal = () => {\n        navigate(-1);\n    };\n\n    useEffect(() => {\n        const initialSquares = Array.from({ length: gridSize }, (_, index) => {\n            return { id: index };\n        });\n        setSquares(initialSquares);\n    }, []);\n\n    useEffect(() => {\n        fetchComputersData()\n            .then(res => {\n                dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n            })\n            .catch(error => {\n                dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n            });\n    }, [dispatch])\n\n    const handleDragStart = (e: React.DragEvent<HTMLDivElement>, id: number) => {\n        if (id) {\n            setDragStart(id);\n        }\n    };\n\n    const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n    };\n\n    const handleDrop = (e: React.DragEvent<HTMLDivElement>, id: number) => {\n        e.preventDefault();\n\n        if (id) {\n            fetchComputerGridReplace(dragStart, id);\n\n            dispatch({ type: FETCH_COMPUTERS_REQUEST });\n            fetchComputersData()\n                .then(res => {\n                    dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n                })\n                .catch(error => {\n                    dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n                });\n        }\n    };\n\n    const renderSquares = () => {\n        return squares.map((square) => {\n            return (\n                <PlaygroundSquare\n                    key={square.id}\n                    id={square.id}\n                    onDragStart={handleDragStart}\n                    onDragOver={handleDragOver}\n                    onDrop={handleDrop}\n                    playground={playground}\n                />\n\n            );\n        });\n    };\n\n    return (\n        <article className={styles.article}>\n            <div className={styles.grid}>\n                {renderSquares()}\n            </div>\n        </article>\n    );\n}\n\nexport default PlaygroundGrid;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}