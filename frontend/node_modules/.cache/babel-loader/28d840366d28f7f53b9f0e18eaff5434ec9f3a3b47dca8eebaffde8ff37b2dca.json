{"ast":null,"code":"var _jsxFileName = \"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/Store/Store.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styles from \"./Store.module.css\";\n// import data from \"../../utils/store.json\";\n\nimport { useAppSelector } from '../../services/hooks/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Store = () => {\n  _s();\n  const [selectedItems, setSelectedItems] = useState([]);\n  const [totalPrice, setTotalPrice] = useState(0);\n  const [paymentType, setPaymentType] = useState(\"card\");\n  const storeItems = useAppSelector(store => store.store.items);\n  useEffect(() => {\n    // При изменении выбранных товаров пересчитываем общую стоимость\n    const selectedProducts = storeItems.filter(item => selectedItems.includes(item.id));\n    const price = selectedProducts.reduce((total, product) => total + product.price, 0);\n    setTotalPrice(price);\n  }, [selectedItems]);\n  const handleItemClick = itemId => {\n    if (selectedItems.includes(itemId)) {\n      setSelectedItems(selectedItems.filter(id => id !== itemId));\n    } else {\n      setSelectedItems([...selectedItems, itemId]);\n    }\n  };\n  const handlePaymentTypeChange = type => {\n    setPaymentType(type);\n  };\n  const handleAddToCart = () => {\n    const selectedProducts = storeItems.filter(item => selectedItems.includes(item.id));\n    // Здесь вы можете выполнить действие добавления выбранных товаров в корзину, например, вызвать функцию или отправить данные на сервер.\n    console.log(\"Выбранные товары:\", selectedProducts);\n    console.log(\"Тип оплаты:\", paymentType);\n  };\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: `${styles.storeContainer} ${styles.mt4}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(Store, \"RhuIeG0CEYJUSJcnRn7LiS8iLeE=\", false, function () {\n  return [useAppSelector];\n});\n_c = Store;\nvar _c;\n$RefreshReg$(_c, \"Store\");","map":{"version":3,"names":["React","useState","useEffect","styles","useAppSelector","jsxDEV","_jsxDEV","Store","_s","selectedItems","setSelectedItems","totalPrice","setTotalPrice","paymentType","setPaymentType","storeItems","store","items","selectedProducts","filter","item","includes","id","price","reduce","total","product","handleItemClick","itemId","handlePaymentTypeChange","type","handleAddToCart","console","log","className","storeContainer","mt4","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/Store/Store.tsx"],"sourcesContent":["import React, { FC, useState, useEffect } from 'react';\nimport styles from \"./Store.module.css\";\n// import data from \"../../utils/store.json\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCreditCard, faCoins } from '@fortawesome/free-solid-svg-icons';\nimport { useAppSelector } from '../../services/hooks/hooks';\nimport { TStoreItem } from '../../services/types/types';\n\nexport const Store: FC = () => {\n    const [selectedItems, setSelectedItems] = useState<any[]>([]);\n    const [totalPrice, setTotalPrice] = useState<number>(0);\n    const [paymentType, setPaymentType] = useState<string>(\"card\");\n\n    const storeItems = useAppSelector((store) => store.store.items);\n    \n    useEffect(() => {\n        // При изменении выбранных товаров пересчитываем общую стоимость\n        const selectedProducts = storeItems.filter((item: TStoreItem) => selectedItems.includes(item.id));\n\n        const price = selectedProducts.reduce((total: number, product: TStoreItem) => total + product.price, 0);\n        setTotalPrice(price);\n    }, [selectedItems]);\n\n    const handleItemClick = (itemId: any) => {\n        if (selectedItems.includes(itemId)) {\n            setSelectedItems(selectedItems.filter((id) => id !== itemId));\n        } else {\n            setSelectedItems([...selectedItems, itemId]);\n        }\n    };\n\n    const handlePaymentTypeChange = (type: string) => {\n        setPaymentType(type);\n    };\n\n    const handleAddToCart = () => {\n        const selectedProducts = storeItems.filter((item: TStoreItem) => selectedItems.includes(item.id));\n        // Здесь вы можете выполнить действие добавления выбранных товаров в корзину, например, вызвать функцию или отправить данные на сервер.\n        console.log(\"Выбранные товары:\", selectedProducts);\n        console.log(\"Тип оплаты:\", paymentType);\n\n    };\n\n    return (\n        <article className={`${styles.storeContainer} ${styles.mt4}`}>\n            {/* <div className={styles.card}>\n                <table className={styles.table}>\n                    <thead>\n                        <tr>\n                            <th>Название</th>\n                            <th>Стоимость</th>\n                            <th>Количество</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {storeItems.map((item: TStoreItem) => (\n                            <tr\n                                key={item.id}\n                                className={selectedItems.includes(item.id) ? styles.selectedRow : \"\"}\n                                onClick={() => handleItemClick(item.id)}\n                            >\n                                <td>{item.name}</td>\n                                <td>{item.price}</td>\n                                <td>{item.qty}</td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n\n            <div className={styles.cart}>\n                <div className={styles.cartHeader}>\n                    <h2>Корзина</h2>\n                </div>\n\n                <div className={styles.cartBody}>\n                    {selectedItems.length > 0 ? (\n                        <ul>\n                            {selectedItems.map((itemId) => {\n                                const item1 = storeItems.find((item: TStoreItem) => item.id === itemId);\n                                return <li className={styles.listRow} key={itemId}>{item1?.name}</li>;\n                            })}\n                        </ul>\n                    ) : (\n                        <p>Корзина пуста</p>\n                    )}\n                </div>\n\n                <div className={styles.cartFooter}>\n\n                    <div className={`${styles.switcher}`}>\n                        <button\n                            className={`${styles.paymentButton} ${paymentType === \"card\" ? styles.activeButton : styles.nonActiveButton}`}\n                            onClick={() => handlePaymentTypeChange(\"card\")}\n                        >\n                            <FontAwesomeIcon icon={faCreditCard} /> Безналичный\n                        </button>\n                        <button\n                            className={`${styles.paymentButton} ${paymentType === \"cash\" ? styles.activeButton : styles.nonActiveButton}`}\n                            onClick={() => handlePaymentTypeChange(\"cash\")}\n                        >\n                            <FontAwesomeIcon icon={faCoins} /> Наличный\n                        </button>\n                    </div>\n\n                    <button className={`${styles.submitButton} ${styles.mt2}`} onClick={handleAddToCart} disabled={selectedItems.length === 0}>\n                        Оплатить\n                        <span>\n                            {totalPrice} руб.\n                        </span>\n                    </button>\n                </div>\n            </div> */}\n        </article>\n    );\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAQC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACtD,OAAOC,MAAM,MAAM,oBAAoB;AACvC;;AAGA,SAASC,cAAc,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG5D,OAAO,MAAMC,KAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAQ,EAAE,CAAC;EAC7D,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAS,CAAC,CAAC;EACvD,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAS,MAAM,CAAC;EAE9D,MAAMc,UAAU,GAAGX,cAAc,CAAEY,KAAK,IAAKA,KAAK,CAACA,KAAK,CAACC,KAAK,CAAC;EAE/Df,SAAS,CAAC,MAAM;IACZ;IACA,MAAMgB,gBAAgB,GAAGH,UAAU,CAACI,MAAM,CAAEC,IAAgB,IAAKX,aAAa,CAACY,QAAQ,CAACD,IAAI,CAACE,EAAE,CAAC,CAAC;IAEjG,MAAMC,KAAK,GAAGL,gBAAgB,CAACM,MAAM,CAAC,CAACC,KAAa,EAAEC,OAAmB,KAAKD,KAAK,GAAGC,OAAO,CAACH,KAAK,EAAE,CAAC,CAAC;IACvGX,aAAa,CAACW,KAAK,CAAC;EACxB,CAAC,EAAE,CAACd,aAAa,CAAC,CAAC;EAEnB,MAAMkB,eAAe,GAAIC,MAAW,IAAK;IACrC,IAAInB,aAAa,CAACY,QAAQ,CAACO,MAAM,CAAC,EAAE;MAChClB,gBAAgB,CAACD,aAAa,CAACU,MAAM,CAAEG,EAAE,IAAKA,EAAE,KAAKM,MAAM,CAAC,CAAC;IACjE,CAAC,MAAM;MACHlB,gBAAgB,CAAC,CAAC,GAAGD,aAAa,EAAEmB,MAAM,CAAC,CAAC;IAChD;EACJ,CAAC;EAED,MAAMC,uBAAuB,GAAIC,IAAY,IAAK;IAC9ChB,cAAc,CAACgB,IAAI,CAAC;EACxB,CAAC;EAED,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC1B,MAAMb,gBAAgB,GAAGH,UAAU,CAACI,MAAM,CAAEC,IAAgB,IAAKX,aAAa,CAACY,QAAQ,CAACD,IAAI,CAACE,EAAE,CAAC,CAAC;IACjG;IACAU,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEf,gBAAgB,CAAC;IAClDc,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEpB,WAAW,CAAC;EAE3C,CAAC;EAED,oBACIP,OAAA;IAAS4B,SAAS,EAAG,GAAE/B,MAAM,CAACgC,cAAe,IAAGhC,MAAM,CAACiC,GAAI;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAqEpD,CAAC;AAElB,CAAC;AAAChC,EAAA,CA3GWD,KAAS;EAAA,QAKCH,cAAc;AAAA;AAAAqC,EAAA,GALxBlC,KAAS;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}