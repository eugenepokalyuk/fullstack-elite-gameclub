{"ast":null,"code":"const ApiUrlPath = 'http://localhost:8003';\n// const ApiUrlPath = 'https://norma.nomoreparties.space/api';\n\n// const request = (endpoint: string, options: RequestInit) => {\n//     const url = `${ApiUrlPath}${endpoint}`;\n//     return fetch(url, options).then(checkResponse);\n// // }\n// const checkResponse = (res: Response) => {\n//     return res.ok ? res.json() : res.json().then((err) => Promise.reject(err));\n// };\n// export const fetchComputersData = () => {\n//     const endpoint = '/ping';\n//     return request(endpoint, {})\n//         .then((res) => {\n//             if (res.success) return res.data;\n//             return Promise.reject(res);\n//         });\n// }\n\nconst request = (endpoint, options) => {\n  const url = `${ApiUrlPath}${endpoint}`;\n  console.log(url);\n  return fetch(url, options).then(checkResponse);\n};\nconst checkResponse = res => {\n  return res.ok ? res.json() : res.json().then(err => Promise.reject(err));\n};\nexport const fetchComputersData = async () => {\n  const endpoint = \"/ping\";\n  return request(endpoint, {});\n  // const response = fetch(ApiUrlPath + endpoint)\n  //     .then((res) => {\n  //         return res.json()\n  //     }).then((data) => {\n  //         return data;\n  //     })\n  // return response;\n};","map":{"version":3,"names":["ApiUrlPath","request","endpoint","options","url","console","log","fetch","then","checkResponse","res","ok","json","err","Promise","reject","fetchComputersData"],"sources":["/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/utils/api.ts"],"sourcesContent":["const ApiUrlPath = 'http://localhost:8003';\n// const ApiUrlPath = 'https://norma.nomoreparties.space/api';\n\n// const request = (endpoint: string, options: RequestInit) => {\n//     const url = `${ApiUrlPath}${endpoint}`;\n//     return fetch(url, options).then(checkResponse);\n// // }\n// const checkResponse = (res: Response) => {\n//     return res.ok ? res.json() : res.json().then((err) => Promise.reject(err));\n// };\n// export const fetchComputersData = () => {\n//     const endpoint = '/ping';\n//     return request(endpoint, {})\n//         .then((res) => {\n//             if (res.success) return res.data;\n//             return Promise.reject(res);\n//         });\n// }\n\nconst request = (endpoint: string, options: RequestInit) => {\n    const url = `${ApiUrlPath}${endpoint}`;\n    console.log(url)\n    return fetch(url, options).then(checkResponse);\n};\nconst checkResponse = (res: Response) => {\n    return res.ok ? res.json() : res.json().then((err) => Promise.reject(err));\n};\nexport const fetchComputersData = async () => {\n    const endpoint = \"/ping\";\n    return request(endpoint, {\n        \n    });\n    // const response = fetch(ApiUrlPath + endpoint)\n    //     .then((res) => {\n    //         return res.json()\n    //     }).then((data) => {\n    //         return data;\n    //     })\n    // return response;\n}"],"mappings":"AAAA,MAAMA,UAAU,GAAG,uBAAuB;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,OAAO,GAAGA,CAACC,QAAgB,EAAEC,OAAoB,KAAK;EACxD,MAAMC,GAAG,GAAI,GAAEJ,UAAW,GAAEE,QAAS,EAAC;EACtCG,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;EAChB,OAAOG,KAAK,CAACH,GAAG,EAAED,OAAO,CAAC,CAACK,IAAI,CAACC,aAAa,CAAC;AAClD,CAAC;AACD,MAAMA,aAAa,GAAIC,GAAa,IAAK;EACrC,OAAOA,GAAG,CAACC,EAAE,GAAGD,GAAG,CAACE,IAAI,CAAC,CAAC,GAAGF,GAAG,CAACE,IAAI,CAAC,CAAC,CAACJ,IAAI,CAAEK,GAAG,IAAKC,OAAO,CAACC,MAAM,CAACF,GAAG,CAAC,CAAC;AAC9E,CAAC;AACD,OAAO,MAAMG,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC1C,MAAMd,QAAQ,GAAG,OAAO;EACxB,OAAOD,OAAO,CAACC,QAAQ,EAAE,CAEzB,CAAC,CAAC;EACF;EACA;EACA;EACA;EACA;EACA;EACA;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}