{"ast":null,"code":"var _jsxFileName = \"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/PlaygroundGrid/PlaygroundGrid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styles from './PlaygroundGrid.module.css';\nimport PlaygroundSquare from '../PlaygroundSquare/PlaygroundSquare';\nimport { useAppDispatch } from '../../services/hooks/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlaygroundGrid = ({\n  playground\n}) => {\n  _s();\n  const gridSize = 200;\n  const squareSize = 18;\n  const [squares, setSquares] = useState([]);\n  const [gridPositionFrom, setGridPositionFrom] = useState();\n  const [gridPositionTo, setGridPositionTo] = useState();\n  const dispatch = useAppDispatch();\n\n  // useEffect(() => {\n  //     const initialSquares = Array.from({ length: gridSize }, (_, index) => {\n  //         const x = (index % gridSize) * squareSize;\n  //         const y = Math.floor(index / gridSize) * squareSize;\n  //         return { id: index, position: { x, y } };\n  //     });\n\n  //     setSquares(initialSquares);\n  // }, []);\n\n  const handleDragStart = (e, id) => {\n    setGridPositionFrom(id);\n    e.dataTransfer.setData(\"text/plain\", id.toString());\n  };\n  const handleDragOver = e => {\n    e.preventDefault();\n  };\n  const handleDrop = (e, id) => {\n    e.preventDefault();\n    const squareId = Number(e.dataTransfer.getData(\"text/plain\"));\n    const updatedSquares = squares.map(square => {\n      if (square.id === squareId) {\n        return {\n          ...square,\n          position: {\n            x: e.clientX,\n            y: e.clientY\n          }\n        };\n      }\n      return square;\n    });\n    setSquares(updatedSquares);\n    // fetchComputerGridReplace(gridPositionFrom, id);\n\n    // console.log(\"squares\", squares.find((item) => {\n    // item\n    // }))\n\n    // dispatch({ type: FETCH_COMPUTERS_REQUEST });\n    // fetchComputersData()\n    //     .then(res => {\n    //         dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n    //     })\n    //     .catch(error => {\n    //         dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n    //     });\n  };\n\n  // useEffect(() => {\n  //     dispatch({ type: FETCH_COMPUTERS_REQUEST });\n  //     fetchComputersData()\n  //         .then(res => {\n  //             dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n  //         })\n  //         .catch(error => {\n  //             dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n  //         });\n  // }, [dispatch])\n\n  const renderSquares = () => {\n    return squares.map(square => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(PlaygroundSquare, {\n          id: square.id,\n          position: square.position,\n          onDragStart: handleDragStart,\n          onDragOver: handleDragOver,\n          onDrop: handleDrop,\n          playground: playground\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)\n      }, square.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: styles.article,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.grid,\n      children: renderSquares()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n};\n_s(PlaygroundGrid, \"s1F7qLy6O+EB8MyS/fSxDwlNs/s=\", false, function () {\n  return [useAppDispatch];\n});\n_c = PlaygroundGrid;\nexport default PlaygroundGrid;\nvar _c;\n$RefreshReg$(_c, \"PlaygroundGrid\");","map":{"version":3,"names":["React","useState","styles","PlaygroundSquare","useAppDispatch","jsxDEV","_jsxDEV","PlaygroundGrid","playground","_s","gridSize","squareSize","squares","setSquares","gridPositionFrom","setGridPositionFrom","gridPositionTo","setGridPositionTo","dispatch","handleDragStart","e","id","dataTransfer","setData","toString","handleDragOver","preventDefault","handleDrop","squareId","Number","getData","updatedSquares","map","square","position","x","clientX","y","clientY","renderSquares","children","onDragStart","onDragOver","onDrop","fileName","_jsxFileName","lineNumber","columnNumber","className","article","grid","_c","$RefreshReg$"],"sources":["/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/PlaygroundGrid/PlaygroundGrid.tsx"],"sourcesContent":["import React, { FC, useEffect, useState } from 'react';\nimport styles from './PlaygroundGrid.module.css';\nimport { TComputer } from '../../services/types/types';\nimport PlaygroundSquare from '../PlaygroundSquare/PlaygroundSquare';\nimport { fetchComputerGridReplace, fetchComputersData } from '../../utils/api';\nimport { useAppDispatch } from '../../services/hooks/hooks';\nimport { FETCH_COMPUTERS_FAILURE, FETCH_COMPUTERS_REQUEST, FETCH_COMPUTERS_SUCCESS } from '../../services/actions/computers';\n\nconst PlaygroundGrid: FC<{ playground: TComputer[] }> = ({ playground }) => {\n    const gridSize = 200;\n    const squareSize = 18;\n    const [squares, setSquares] = useState<{ id: number; position: { x: number; y: number } }[]>([]);\n\n    const [gridPositionFrom, setGridPositionFrom] = useState<number>();\n    const [gridPositionTo, setGridPositionTo] = useState<number>();\n\n    const dispatch = useAppDispatch();\n\n    // useEffect(() => {\n    //     const initialSquares = Array.from({ length: gridSize }, (_, index) => {\n    //         const x = (index % gridSize) * squareSize;\n    //         const y = Math.floor(index / gridSize) * squareSize;\n    //         return { id: index, position: { x, y } };\n    //     });\n\n    //     setSquares(initialSquares);\n    // }, []);\n\n    const handleDragStart = (e: React.DragEvent<HTMLDivElement>, id: number) => {\n        setGridPositionFrom(id);\n\n        e.dataTransfer.setData(\"text/plain\", id.toString());\n    };\n\n    const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n    };\n\n    const handleDrop = (e: React.DragEvent<HTMLDivElement>, id: number) => {\n        e.preventDefault();\n        const squareId = Number(e.dataTransfer.getData(\"text/plain\"));\n\n        const updatedSquares = squares.map((square) => {\n            if (square.id === squareId) {\n                return {\n                    ...square,\n                    position: { x: e.clientX, y: e.clientY },\n                };\n            }\n            return square;\n        });\n\n        setSquares(updatedSquares);\n        // fetchComputerGridReplace(gridPositionFrom, id);\n\n        // console.log(\"squares\", squares.find((item) => {\n        // item\n        // }))\n\n        // dispatch({ type: FETCH_COMPUTERS_REQUEST });\n        // fetchComputersData()\n        //     .then(res => {\n        //         dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n        //     })\n        //     .catch(error => {\n        //         dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n        //     });\n    };\n\n    // useEffect(() => {\n    //     dispatch({ type: FETCH_COMPUTERS_REQUEST });\n    //     fetchComputersData()\n    //         .then(res => {\n    //             dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n    //         })\n    //         .catch(error => {\n    //             dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n    //         });\n    // }, [dispatch])\n\n    const renderSquares = () => {\n        return squares.map((square) => {\n            return (\n                <div key={square.id}>\n                    <PlaygroundSquare\n                        id={square.id}\n                        position={square.position}\n                        onDragStart={handleDragStart}\n                        onDragOver={handleDragOver}\n                        onDrop={handleDrop}\n                        playground={playground}\n                    />\n                </div>\n            );\n        });\n    };\n\n    return (\n        <article className={styles.article}>\n            <div className={styles.grid}>\n                {renderSquares()}\n            </div>\n        </article>\n    );\n}\n\nexport default PlaygroundGrid;"],"mappings":";;AAAA,OAAOA,KAAK,IAAmBC,QAAQ,QAAQ,OAAO;AACtD,OAAOC,MAAM,MAAM,6BAA6B;AAEhD,OAAOC,gBAAgB,MAAM,sCAAsC;AAEnE,SAASC,cAAc,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG5D,MAAMC,cAA+C,GAAGA,CAAC;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EACxE,MAAMC,QAAQ,GAAG,GAAG;EACpB,MAAMC,UAAU,GAAG,EAAE;EACrB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAuD,EAAE,CAAC;EAEhG,MAAM,CAACa,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGd,QAAQ,CAAS,CAAC;EAClE,MAAM,CAACe,cAAc,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAAS,CAAC;EAE9D,MAAMiB,QAAQ,GAAGd,cAAc,CAAC,CAAC;;EAEjC;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA,MAAMe,eAAe,GAAGA,CAACC,CAAkC,EAAEC,EAAU,KAAK;IACxEN,mBAAmB,CAACM,EAAE,CAAC;IAEvBD,CAAC,CAACE,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEF,EAAE,CAACG,QAAQ,CAAC,CAAC,CAAC;EACvD,CAAC;EAED,MAAMC,cAAc,GAAIL,CAAkC,IAAK;IAC3DA,CAAC,CAACM,cAAc,CAAC,CAAC;EACtB,CAAC;EAED,MAAMC,UAAU,GAAGA,CAACP,CAAkC,EAAEC,EAAU,KAAK;IACnED,CAAC,CAACM,cAAc,CAAC,CAAC;IAClB,MAAME,QAAQ,GAAGC,MAAM,CAACT,CAAC,CAACE,YAAY,CAACQ,OAAO,CAAC,YAAY,CAAC,CAAC;IAE7D,MAAMC,cAAc,GAAGnB,OAAO,CAACoB,GAAG,CAAEC,MAAM,IAAK;MAC3C,IAAIA,MAAM,CAACZ,EAAE,KAAKO,QAAQ,EAAE;QACxB,OAAO;UACH,GAAGK,MAAM;UACTC,QAAQ,EAAE;YAAEC,CAAC,EAAEf,CAAC,CAACgB,OAAO;YAAEC,CAAC,EAAEjB,CAAC,CAACkB;UAAQ;QAC3C,CAAC;MACL;MACA,OAAOL,MAAM;IACjB,CAAC,CAAC;IAEFpB,UAAU,CAACkB,cAAc,CAAC;IAC1B;;IAEA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMQ,aAAa,GAAGA,CAAA,KAAM;IACxB,OAAO3B,OAAO,CAACoB,GAAG,CAAEC,MAAM,IAAK;MAC3B,oBACI3B,OAAA;QAAAkC,QAAA,eACIlC,OAAA,CAACH,gBAAgB;UACbkB,EAAE,EAAEY,MAAM,CAACZ,EAAG;UACda,QAAQ,EAAED,MAAM,CAACC,QAAS;UAC1BO,WAAW,EAAEtB,eAAgB;UAC7BuB,UAAU,EAAEjB,cAAe;UAC3BkB,MAAM,EAAEhB,UAAW;UACnBnB,UAAU,EAAEA;QAAW;UAAAoC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1B;MAAC,GARId,MAAM,CAACZ,EAAE;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASd,CAAC;IAEd,CAAC,CAAC;EACN,CAAC;EAED,oBACIzC,OAAA;IAAS0C,SAAS,EAAE9C,MAAM,CAAC+C,OAAQ;IAAAT,QAAA,eAC/BlC,OAAA;MAAK0C,SAAS,EAAE9C,MAAM,CAACgD,IAAK;MAAAV,QAAA,EACvBD,aAAa,CAAC;IAAC;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACf;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAElB,CAAC;AAAAtC,EAAA,CAhGKF,cAA+C;EAAA,QAQhCH,cAAc;AAAA;AAAA+C,EAAA,GAR7B5C,cAA+C;AAkGrD,eAAeA,cAAc;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}