{"ast":null,"code":"import { fetchComputersData } from \"../../utils/api\";\nexport const FETCH_COMPUTERS_REQUEST = \"FETCH_COMPUTERS_REQUEST\";\nexport const FETCH_COMPUTERS_SUCCESS = \"FETCH_COMPUTERS_SUCCESS\";\nexport const FETCH_COMPUTERS_FAILURE = \"FETCH_COMPUTERS_FAILURE\";\nexport const FETCH_COMPUTERS_CLEAR = \"FETCH_COMPUTERS_CLEAR\";\nexport const fetchComputersRequest = () => ({\n  type: FETCH_COMPUTERS_REQUEST\n});\nvar ActionTypes = /*#__PURE__*/function (ActionTypes) {\n  ActionTypes[\"FETCH_COMPUTERS_REQUEST\"] = \"FETCH_COMPUTERS_REQUEST\";\n  ActionTypes[\"FETCH_COMPUTERS_SUCCESS\"] = \"FETCH_COMPUTERS_SUCCESS\";\n  ActionTypes[\"FETCH_COMPUTERS_FAILURE\"] = \"FETCH_COMPUTERS_FAILURE\";\n  ActionTypes[\"FETCH_CONSTRUCTOR_COMPUTERS_REQUEST\"] = \"FETCH_CONSTRUCTOR_COMPUTERS_REQUEST\";\n  return ActionTypes;\n}(ActionTypes || {});\nexport const fetchComputersSuccess = data => ({\n  type: ActionTypes.FETCH_COMPUTERS_SUCCESS,\n  payload: data\n});\nexport const fetchComputersFailure = error => ({\n  type: FETCH_COMPUTERS_FAILURE,\n  payload: error\n});\nexport function getComputers() {\n  return function (dispatch) {\n    dispatch({\n      type: FETCH_COMPUTERS_REQUEST\n    });\n    fetchComputersData().then(res => {\n      dispatch(fetchComputersSuccess(res.data));\n    }).catch(error => dispatch(fetchComputersFailure(error)));\n  };\n}","map":{"version":3,"names":["fetchComputersData","FETCH_COMPUTERS_REQUEST","FETCH_COMPUTERS_SUCCESS","FETCH_COMPUTERS_FAILURE","FETCH_COMPUTERS_CLEAR","fetchComputersRequest","type","ActionTypes","fetchComputersSuccess","data","payload","fetchComputersFailure","error","getComputers","dispatch","then","res","catch"],"sources":["/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/services/actions/computers.ts"],"sourcesContent":["import { fetchComputersData } from \"../../utils/api\";\nimport { useAppDispatch } from \"../hooks/hooks\";\n\nexport const FETCH_COMPUTERS_REQUEST: \"FETCH_COMPUTERS_REQUEST\" =\n    \"FETCH_COMPUTERS_REQUEST\";\nexport const FETCH_COMPUTERS_SUCCESS: \"FETCH_COMPUTERS_SUCCESS\" =\n    \"FETCH_COMPUTERS_SUCCESS\";\nexport const FETCH_COMPUTERS_FAILURE: \"FETCH_COMPUTERS_FAILURE\" =\n    \"FETCH_COMPUTERS_FAILURE\";\nexport const FETCH_COMPUTERS_CLEAR: \"FETCH_COMPUTERS_CLEAR\" =\n    \"FETCH_COMPUTERS_CLEAR\";\n\nexport type TComputers =\n    | IFetchComputersRequestAction\n    | IFetchComputersSuccessAction\n    | IFetchComputersFailureAction\n    | IFetchComputersClearAction;\n\nexport interface IFetchComputersRequestAction {\n    readonly type: typeof FETCH_COMPUTERS_REQUEST;\n}\n\nexport interface IFetchComputersSuccessAction {\n    readonly type: typeof FETCH_COMPUTERS_SUCCESS;\n    readonly payload: any;\n}\n\nexport interface IFetchComputersSuccessAction {\n    readonly type: typeof FETCH_COMPUTERS_SUCCESS;\n    readonly payload: any;\n}\n\nexport interface IFetchComputersFailureAction {\n    readonly type: typeof FETCH_COMPUTERS_FAILURE;\n    readonly payload: string;\n}\n\nexport const fetchComputersRequest = (): IFetchComputersRequestAction => ({\n    type: FETCH_COMPUTERS_REQUEST,\n});\n\nenum ActionTypes {\n    FETCH_COMPUTERS_REQUEST = \"FETCH_COMPUTERS_REQUEST\",\n    FETCH_COMPUTERS_SUCCESS = \"FETCH_COMPUTERS_SUCCESS\",\n    FETCH_COMPUTERS_FAILURE = \"FETCH_COMPUTERS_FAILURE\",\n    FETCH_CONSTRUCTOR_COMPUTERS_REQUEST = \"FETCH_CONSTRUCTOR_COMPUTERS_REQUEST\",\n}\n\nexport const fetchComputersSuccess = (\n    data: any[]\n): IFetchComputersSuccessAction => ({\n    type: ActionTypes.FETCH_COMPUTERS_SUCCESS,\n    payload: data,\n});\n\nexport const fetchComputersFailure = (\n    error: string\n): IFetchComputersFailureAction => ({\n    type: FETCH_COMPUTERS_FAILURE,\n    payload: error,\n});\n\nexport function getComputers() {\n    return function (dispatch: ReturnType<typeof useAppDispatch>) {\n        dispatch({\n            type: FETCH_COMPUTERS_REQUEST,\n        });\n\n        fetchComputersData()\n            .then((res) => {\n                dispatch(fetchComputersSuccess(res.data));\n            })\n            .catch((error) =>\n                dispatch(fetchComputersFailure(error))\n            );\n    };\n}"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,iBAAiB;AAGpD,OAAO,MAAMC,uBAAkD,GAC3D,yBAAyB;AAC7B,OAAO,MAAMC,uBAAkD,GAC3D,yBAAyB;AAC7B,OAAO,MAAMC,uBAAkD,GAC3D,yBAAyB;AAC7B,OAAO,MAAMC,qBAA8C,GACvD,uBAAuB;AA2B3B,OAAO,MAAMC,qBAAqB,GAAGA,CAAA,MAAqC;EACtEC,IAAI,EAAEL;AACV,CAAC,CAAC;AAAC,IAEEM,WAAW,0BAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAA,OAAXA,WAAW;AAAA,EAAXA,WAAW;AAOhB,OAAO,MAAMC,qBAAqB,GAC9BC,IAAW,KACqB;EAChCH,IAAI,EAAEC,WAAW,CAACL,uBAAuB;EACzCQ,OAAO,EAAED;AACb,CAAC,CAAC;AAEF,OAAO,MAAME,qBAAqB,GAC9BC,KAAa,KACmB;EAChCN,IAAI,EAAEH,uBAAuB;EAC7BO,OAAO,EAAEE;AACb,CAAC,CAAC;AAEF,OAAO,SAASC,YAAYA,CAAA,EAAG;EAC3B,OAAO,UAAUC,QAA2C,EAAE;IAC1DA,QAAQ,CAAC;MACLR,IAAI,EAAEL;IACV,CAAC,CAAC;IAEFD,kBAAkB,CAAC,CAAC,CACfe,IAAI,CAAEC,GAAG,IAAK;MACXF,QAAQ,CAACN,qBAAqB,CAACQ,GAAG,CAACP,IAAI,CAAC,CAAC;IAC7C,CAAC,CAAC,CACDQ,KAAK,CAAEL,KAAK,IACTE,QAAQ,CAACH,qBAAqB,CAACC,KAAK,CAAC,CACzC,CAAC;EACT,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}