{"ast":null,"code":"var _jsxFileName = \"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/PlaygroundGrid/PlaygroundGrid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport styles from './PlaygroundGrid.module.css';\nimport PlaygroundSquare from '../PlaygroundSquare/PlaygroundSquare';\nimport { fetchComputerGridReplace, fetchComputersData } from '../../utils/api';\nimport { useAppDispatch, useAppSelector } from '../../services/hooks/hooks';\nimport { FETCH_COMPUTERS_FAILURE, FETCH_COMPUTERS_REQUEST, FETCH_COMPUTERS_SUCCESS } from '../../services/actions/computers';\nimport Modal from '../Modal/Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PlaygroundGrid = () => {\n  _s();\n  const dispatch = useAppDispatch();\n  const [loading, isLoading] = useState(false);\n  const playground = useAppSelector(store => store.playground.computers);\n  const gridSize = 200;\n  const [squares, setSquares] = useState([]);\n  const [dragStart, setDragStart] = useState();\n  // const [newPlayground, setNewPlayground] = useState<string[]>();\n\n  useEffect(() => {\n    const initialSquares = Array.from({\n      length: gridSize\n    }, (_, index) => {\n      return {\n        id: index\n      };\n    });\n    setSquares(initialSquares);\n  }, []);\n  useEffect(() => {\n    fetchComputersData().then(res => {\n      dispatch({\n        type: FETCH_COMPUTERS_SUCCESS,\n        payload: res\n      });\n      // setNewPlayground(res);\n    }).catch(error => {\n      dispatch({\n        type: FETCH_COMPUTERS_FAILURE,\n        payload: error\n      });\n    });\n  }, [dispatch]);\n  const handleDragStart = (e, id) => {\n    if (id) {\n      setDragStart(id);\n    }\n  };\n  const handleDragOver = e => {\n    e.preventDefault();\n  };\n  const handleDrop = (e, id) => {\n    e.preventDefault();\n    if (id) {\n      fetchComputerGridReplace(dragStart, id);\n      isLoading(true);\n      dispatch({\n        type: FETCH_COMPUTERS_REQUEST\n      });\n      fetchComputersData().then(res => {\n        dispatch({\n          type: FETCH_COMPUTERS_SUCCESS,\n          payload: res\n        });\n      }).catch(error => {\n        dispatch({\n          type: FETCH_COMPUTERS_FAILURE,\n          payload: error\n        });\n      });\n    }\n  };\n  const renderSquares = () => {\n    return squares.map(square => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: !loading ? /*#__PURE__*/_jsxDEV(PlaygroundSquare, {\n          id: square.id,\n          onDragStart: handleDragStart,\n          onDragOver: handleDragOver,\n          onDrop: handleDrop,\n          playground: playground\n        }, square.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(Modal, {\n          onClose: closeModal,\n          header: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-4 mt-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: `${styles.textOrangeColor} text text_type_main-medium mb-8`,\n              children: \"\\u041F\\u043E\\u0436\\u0430\\u043B\\u0443\\u0439\\u0441\\u0442\\u0430 \\u043F\\u043E\\u0434\\u043E\\u0436\\u0434\\u0438\\u0442\\u0435\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `${styles.flex} text_color_inactive`,\n              children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faSpinner,\n                spin: true,\n                size: \"5x\",\n                className: `${styles.faSpinner}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this)\n      }, void 0, false);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: styles.article,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.grid,\n      children: renderSquares()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n};\n_s(PlaygroundGrid, \"6ug6Nq9kq9SAo2+DqEkr3FMPaQw=\", false, function () {\n  return [useAppDispatch, useAppSelector];\n});\n_c = PlaygroundGrid;\nexport default PlaygroundGrid;\nvar _c;\n$RefreshReg$(_c, \"PlaygroundGrid\");","map":{"version":3,"names":["React","useEffect","useState","styles","PlaygroundSquare","fetchComputerGridReplace","fetchComputersData","useAppDispatch","useAppSelector","FETCH_COMPUTERS_FAILURE","FETCH_COMPUTERS_REQUEST","FETCH_COMPUTERS_SUCCESS","Modal","jsxDEV","_jsxDEV","Fragment","_Fragment","PlaygroundGrid","_s","dispatch","loading","isLoading","playground","store","computers","gridSize","squares","setSquares","dragStart","setDragStart","initialSquares","Array","from","length","_","index","id","then","res","type","payload","catch","error","handleDragStart","e","handleDragOver","preventDefault","handleDrop","renderSquares","map","square","children","onDragStart","onDragOver","onDrop","fileName","_jsxFileName","lineNumber","columnNumber","onClose","closeModal","header","className","textOrangeColor","flex","FontAwesomeIcon","icon","faSpinner","spin","size","article","grid","_c","$RefreshReg$"],"sources":["/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/PlaygroundGrid/PlaygroundGrid.tsx"],"sourcesContent":["import React, { FC, useEffect, useState } from 'react';\nimport styles from './PlaygroundGrid.module.css';\nimport { TComputer } from '../../services/types/types';\nimport PlaygroundSquare from '../PlaygroundSquare/PlaygroundSquare';\nimport { fetchComputerGridReplace, fetchComputersData } from '../../utils/api';\nimport { useAppDispatch, useAppSelector } from '../../services/hooks/hooks';\nimport { FETCH_COMPUTERS_FAILURE, FETCH_COMPUTERS_REQUEST, FETCH_COMPUTERS_SUCCESS } from '../../services/actions/computers';\nimport Modal from '../Modal/Modal';\n\nconst PlaygroundGrid: FC = () => {\n    const dispatch = useAppDispatch();\n    const [loading, isLoading] = useState<boolean>(false);\n\n    const playground = useAppSelector(\n        (store) => store.playground.computers\n    );\n\n    const gridSize = 200;\n    const [squares, setSquares] = useState<{ id: number }[]>([]);\n    const [dragStart, setDragStart] = useState<number>();\n    // const [newPlayground, setNewPlayground] = useState<string[]>();\n\n    useEffect(() => {\n        const initialSquares = Array.from({ length: gridSize }, (_, index) => {\n            return { id: index };\n        });\n        setSquares(initialSquares);\n    }, []);\n\n    useEffect(() => {\n        fetchComputersData()\n            .then(res => {\n                dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n                // setNewPlayground(res);\n            })\n            .catch(error => {\n                dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n            });\n    }, [dispatch])\n\n    const handleDragStart = (e: React.DragEvent<HTMLDivElement>, id: number) => {\n        if (id) {\n            setDragStart(id);\n        }\n    };\n\n    const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n    };\n\n    const handleDrop = (e: React.DragEvent<HTMLDivElement>, id: number) => {\n        e.preventDefault();\n\n        if (id) {\n            fetchComputerGridReplace(dragStart, id);\n            isLoading(true);\n\n            dispatch({ type: FETCH_COMPUTERS_REQUEST });\n            fetchComputersData()\n                .then(res => {\n                    dispatch({ type: FETCH_COMPUTERS_SUCCESS, payload: res });\n                })\n                .catch(error => {\n                    dispatch({ type: FETCH_COMPUTERS_FAILURE, payload: error });\n                });\n        }\n    };\n\n    const renderSquares = () => {\n        return squares.map((square) => {\n            return (\n                <>\n                    {!loading\n                        ?\n                        <PlaygroundSquare\n                            key={square.id}\n                            id={square.id}\n                            onDragStart={handleDragStart}\n                            onDragOver={handleDragOver}\n                            onDrop={handleDrop}\n                            playground={playground}\n                        />\n                        :\n                        <Modal onClose={closeModal} header=\"Загрузка данных\">\n                            <div className=\"mb-4 mt-4\">\n                            </div>\n                            <div>\n                                <p className={`${styles.textOrangeColor} text text_type_main-medium mb-8`}>\n                                    Пожалуйста подождите\n                                </p>\n                                <div className={`${styles.flex} text_color_inactive`}>\n                                    <FontAwesomeIcon\n                                        icon={faSpinner}\n                                        spin\n                                        size=\"5x\"\n                                        className={`${styles.faSpinner}`}\n                                    />\n                                </div>\n                            </div>\n                        </Modal>\n                    }\n                </>\n\n            );\n        });\n    };\n\n    return (\n        <article className={styles.article}>\n            <div className={styles.grid}>\n                {renderSquares()}\n            </div>\n        </article>\n    );\n}\n\nexport default PlaygroundGrid;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}