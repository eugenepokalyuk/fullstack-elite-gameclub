{"ast":null,"code":"var _jsxFileName = \"/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/Constructor/Constructor.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport styles from './Constructor.module.css';\nimport { useAppSelector } from '../../services/hooks/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// interface SquareProps {\n//     id: number;\n//     position: { x: number; y: number };\n//     onDragStart: Function;\n//     onDragOver: Function;\n//     onDrop: Function;\n//     occupied: boolean;\n//     computer: TComputer | undefined;\n// }\n\n// // const Square: React.FC<SquareProps> = ({\n// //     id,\n// //     position,\n// //     onDragStart,\n// //     onDragOver,\n// //     onDrop,\n// // }) => {\n// //     const style = {\n// //         left: `${position.x}px`,\n// //         top: `${position.y}px`,\n// //     };\n\n// //     return (\n// //         <div\n// //             className={styles.square}\n// //             draggable\n// //             onDragStart={(e) => onDragStart(e, id)}\n// //             onDragOver={(e) => onDragOver(e)}\n// //             onDrop={(e) => onDrop(e, id)}\n// //             style={style}\n// //         />\n// //     );\n// // };\n// const Square: React.FC<SquareProps> = ({\n//     id,\n//     position,\n//     onDragStart,\n//     onDragOver,\n//     onDrop,\n//     occupied,\n// }) => {\n//     const style = {\n//         left: `${position.x}px`,\n//         top: `${position.y}px`,\n//     };\n\n//     // const squareClasses = `${occupied} ? ${styles.square} ${styles.occupied} : ${styles.square}`; // применяем класс styles.occupied в зависимости от занятости\n//     const squareClasses = occupied ? styles.square : styles.squareOccupied; // применяем класс styles.occupied в зависимости от занятости\n\n//     return (\n//         <div\n//             className={squareClasses}\n//             draggable\n//             onDragStart={(e) => onDragStart(e, id)}\n//             onDragOver={(e) => onDragOver(e)}\n//             onDrop={(e) => onDrop(e, id)}\n//             style={style}\n//         />\n//     );\n// };\n\n// const Grid: FC<{ playground: TComputer[] }> = ({ playground }) => {\n//     const gridSize = 200;\n//     const squareSize = 18;\n//     const [squares, setSquares] = useState<{ id: number; position: { x: number; y: number } }[]>([]);\n\n//     useEffect(() => {\n//         const initialSquares = Array.from({ length: gridSize }, (_, index) => {\n//             const x = (index % gridSize) * squareSize;\n//             const y = Math.floor(index / gridSize) * squareSize;\n//             return { id: index, position: { x, y } };\n//         });\n\n//         setSquares(initialSquares);\n//     }, []);\n\n//     const handleDragStart = (e: React.DragEvent<HTMLDivElement>, id: number) => {\n//         console.log(\"handleDragStart\", {\n//             e, id\n//         });\n\n//         e.dataTransfer.setData(\"text/plain\", id.toString());\n//     };\n\n//     const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n//         e.preventDefault();\n\n//         console.log(\"handleDragOver\", {\n//             e\n//         });\n//     };\n\n//     const handleDrop = (e: React.DragEvent<HTMLDivElement>, id: number) => {\n//         e.preventDefault();\n//         const squareId = Number(e.dataTransfer.getData(\"text/plain\"));\n\n//         const updatedSquares = squares.map((square) => {\n//             if (square.id === squareId) {\n//                 return {\n//                     ...square,\n//                     position: { x: e.clientX, y: e.clientY },\n//                 };\n//             }\n//             return square;\n//         });\n\n//         console.log(\"handleDrop\", {\n//             e, id\n//         });\n\n//         setSquares(updatedSquares);\n//     };\n\n//     // const renderSquares = () => {\n//     //     return squares.map((square) => (\n//     //         <Square\n//     //             key={square.id}\n//     //             id={square.id}\n//     //             position={square.position}\n//     //             onDragStart={handleDragStart}\n//     //             onDragOver={handleDragOver}\n//     //             onDrop={handleDrop}\n//     //         />\n//     //     ));\n//     // };\n//     const renderSquares = () => {\n//         return squares.map((square) => {\n//             const { id, position } = square;\n//             const computer = playground.find((item) => item.id === id);\n//             // console.log(computer)\n//             return (\n//                 <div key={square.id}>\n//                     <Square\n//                         id={id}\n//                         position={position}\n//                         onDragStart={handleDragStart}\n//                         onDragOver={handleDragOver}\n//                         onDrop={handleDrop}\n//                         occupied={true}\n//                         computer={computer}\n//                     />\n//                     {/* {item && (\n//                         <ConstructorItem\n//                             key={item.id}\n//                             index={item.id}\n//                             position={position}\n//                             computer={playground[0]} />\n//                     )} */}\n//                 </div>\n//             );\n//         });\n//     };\n\n//     return <div className={styles.grid}>{renderSquares()}</div>;\n// };\n\n// const Constructor: FC = () => {\n//     const playground = useAppSelector(\n//         (store) => store.playground.computers\n//     );\n\n//     return (\n//         <article className={styles.section}>\n//             <Grid playground={playground} />\n//             {/* {playground.length > 0 && playground.map((computer: TComputer, index: number) => {\n//                 return (\n//                     <ConstructorItem computer={computer} index={index + 1} key={index} />\n//                 )\n//             })} */}\n//         </article>\n//     );\n// }\nconst Constructor = () => {\n  _s();\n  const playground = useAppSelector(store => store.playground.computers);\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: styles.section,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      playground: playground\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 9\n  }, this);\n};\n_s(Constructor, \"VU6irv/8aa1WjALHYLDVSKc9lg0=\", false, function () {\n  return [useAppSelector];\n});\n_c = Constructor;\nexport default Constructor;\nvar _c;\n$RefreshReg$(_c, \"Constructor\");","map":{"version":3,"names":["React","styles","useAppSelector","jsxDEV","_jsxDEV","Constructor","_s","playground","store","computers","className","section","children","Grid","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/evgenijpokaluk/Documents/GitHub/fullstack-elite-gameclub/frontend/src/components/Constructor/Constructor.tsx"],"sourcesContent":["import React, { FC, useEffect, useState } from 'react';\nimport styles from './Constructor.module.css';\nimport ConstructorItem from '../ConstructorItem/ConstructorItem';\nimport { useAppSelector } from '../../services/hooks/hooks';\nimport { TComputer } from '../../services/types/types';\n\n// interface SquareProps {\n//     id: number;\n//     position: { x: number; y: number };\n//     onDragStart: Function;\n//     onDragOver: Function;\n//     onDrop: Function;\n//     occupied: boolean;\n//     computer: TComputer | undefined;\n// }\n\n// // const Square: React.FC<SquareProps> = ({\n// //     id,\n// //     position,\n// //     onDragStart,\n// //     onDragOver,\n// //     onDrop,\n// // }) => {\n// //     const style = {\n// //         left: `${position.x}px`,\n// //         top: `${position.y}px`,\n// //     };\n\n// //     return (\n// //         <div\n// //             className={styles.square}\n// //             draggable\n// //             onDragStart={(e) => onDragStart(e, id)}\n// //             onDragOver={(e) => onDragOver(e)}\n// //             onDrop={(e) => onDrop(e, id)}\n// //             style={style}\n// //         />\n// //     );\n// // };\n// const Square: React.FC<SquareProps> = ({\n//     id,\n//     position,\n//     onDragStart,\n//     onDragOver,\n//     onDrop,\n//     occupied,\n// }) => {\n//     const style = {\n//         left: `${position.x}px`,\n//         top: `${position.y}px`,\n//     };\n\n//     // const squareClasses = `${occupied} ? ${styles.square} ${styles.occupied} : ${styles.square}`; // применяем класс styles.occupied в зависимости от занятости\n//     const squareClasses = occupied ? styles.square : styles.squareOccupied; // применяем класс styles.occupied в зависимости от занятости\n\n//     return (\n//         <div\n//             className={squareClasses}\n//             draggable\n//             onDragStart={(e) => onDragStart(e, id)}\n//             onDragOver={(e) => onDragOver(e)}\n//             onDrop={(e) => onDrop(e, id)}\n//             style={style}\n//         />\n//     );\n// };\n\n\n// const Grid: FC<{ playground: TComputer[] }> = ({ playground }) => {\n//     const gridSize = 200;\n//     const squareSize = 18;\n//     const [squares, setSquares] = useState<{ id: number; position: { x: number; y: number } }[]>([]);\n\n//     useEffect(() => {\n//         const initialSquares = Array.from({ length: gridSize }, (_, index) => {\n//             const x = (index % gridSize) * squareSize;\n//             const y = Math.floor(index / gridSize) * squareSize;\n//             return { id: index, position: { x, y } };\n//         });\n\n//         setSquares(initialSquares);\n//     }, []);\n\n//     const handleDragStart = (e: React.DragEvent<HTMLDivElement>, id: number) => {\n//         console.log(\"handleDragStart\", {\n//             e, id\n//         });\n\n//         e.dataTransfer.setData(\"text/plain\", id.toString());\n//     };\n\n//     const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n//         e.preventDefault();\n\n//         console.log(\"handleDragOver\", {\n//             e\n//         });\n//     };\n\n//     const handleDrop = (e: React.DragEvent<HTMLDivElement>, id: number) => {\n//         e.preventDefault();\n//         const squareId = Number(e.dataTransfer.getData(\"text/plain\"));\n\n//         const updatedSquares = squares.map((square) => {\n//             if (square.id === squareId) {\n//                 return {\n//                     ...square,\n//                     position: { x: e.clientX, y: e.clientY },\n//                 };\n//             }\n//             return square;\n//         });\n\n//         console.log(\"handleDrop\", {\n//             e, id\n//         });\n\n//         setSquares(updatedSquares);\n//     };\n\n//     // const renderSquares = () => {\n//     //     return squares.map((square) => (\n//     //         <Square\n//     //             key={square.id}\n//     //             id={square.id}\n//     //             position={square.position}\n//     //             onDragStart={handleDragStart}\n//     //             onDragOver={handleDragOver}\n//     //             onDrop={handleDrop}\n//     //         />\n//     //     ));\n//     // };\n//     const renderSquares = () => {\n//         return squares.map((square) => {\n//             const { id, position } = square;\n//             const computer = playground.find((item) => item.id === id);\n//             // console.log(computer)\n//             return (\n//                 <div key={square.id}>\n//                     <Square\n//                         id={id}\n//                         position={position}\n//                         onDragStart={handleDragStart}\n//                         onDragOver={handleDragOver}\n//                         onDrop={handleDrop}\n//                         occupied={true}\n//                         computer={computer}\n//                     />\n//                     {/* {item && (\n//                         <ConstructorItem\n//                             key={item.id}\n//                             index={item.id}\n//                             position={position}\n//                             computer={playground[0]} />\n//                     )} */}\n//                 </div>\n//             );\n//         });\n//     };\n\n//     return <div className={styles.grid}>{renderSquares()}</div>;\n// };\n\n// const Constructor: FC = () => {\n//     const playground = useAppSelector(\n//         (store) => store.playground.computers\n//     );\n\n//     return (\n//         <article className={styles.section}>\n//             <Grid playground={playground} />\n//             {/* {playground.length > 0 && playground.map((computer: TComputer, index: number) => {\n//                 return (\n//                     <ConstructorItem computer={computer} index={index + 1} key={index} />\n//                 )\n//             })} */}\n//         </article>\n//     );\n// }\n\nconst Constructor: FC = () => {\n    const playground = useAppSelector(\n        (store) => store.playground.computers\n    );\n\n    return (\n        <article className={styles.section}>\n            <Grid playground={playground} />\n            {/* {playground.length > 0 && playground.map((computer: TComputer, index: number) => {\n                return (\n                    <ConstructorItem computer={computer} index={index + 1} key={index} />\n                )\n            })} */}\n        </article>\n    );\n}\n\nexport default Constructor;"],"mappings":";;AAAA,OAAOA,KAAK,MAAmC,OAAO;AACtD,OAAOC,MAAM,MAAM,0BAA0B;AAE7C,SAASC,cAAc,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMC,WAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAMC,UAAU,GAAGL,cAAc,CAC5BM,KAAK,IAAKA,KAAK,CAACD,UAAU,CAACE,SAChC,CAAC;EAED,oBACIL,OAAA;IAASM,SAAS,EAAET,MAAM,CAACU,OAAQ;IAAAC,QAAA,eAC/BR,OAAA,CAACS,IAAI;MAACN,UAAU,EAAEA;IAAW;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAM3B,CAAC;AAElB,CAAC;AAAAX,EAAA,CAfKD,WAAe;EAAA,QACEH,cAAc;AAAA;AAAAgB,EAAA,GAD/Bb,WAAe;AAiBrB,eAAeA,WAAW;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}